// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Struct.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Struct_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Struct_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Struct_2eproto;
namespace Protocol {
class Membership;
struct MembershipDefaultTypeInternal;
extern MembershipDefaultTypeInternal _Membership_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class PositionInfo;
struct PositionInfoDefaultTypeInternal;
extern PositionInfoDefaultTypeInternal _PositionInfo_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::Membership* Arena::CreateMaybeMessage<::Protocol::Membership>(Arena*);
template<> ::Protocol::PlayerInfo* Arena::CreateMaybeMessage<::Protocol::PlayerInfo>(Arena*);
template<> ::Protocol::PositionInfo* Arena::CreateMaybeMessage<::Protocol::PositionInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class PositionInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PositionInfo) */ {
 public:
  inline PositionInfo() : PositionInfo(nullptr) {}
  ~PositionInfo() override;
  explicit PROTOBUF_CONSTEXPR PositionInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PositionInfo(const PositionInfo& from);
  PositionInfo(PositionInfo&& from) noexcept
    : PositionInfo() {
    *this = ::std::move(from);
  }

  inline PositionInfo& operator=(const PositionInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PositionInfo& operator=(PositionInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PositionInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PositionInfo* internal_default_instance() {
    return reinterpret_cast<const PositionInfo*>(
               &_PositionInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PositionInfo& a, PositionInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PositionInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PositionInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PositionInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PositionInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PositionInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PositionInfo& from) {
    PositionInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PositionInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PositionInfo";
  }
  protected:
  explicit PositionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kXFieldNumber = 2,
    kYFieldNumber = 3,
    kZFieldNumber = 4,
    kYawFieldNumber = 5,
    kStateFieldNumber = 6,
    kIsAimingFieldNumber = 7,
    kIsHoldingFieldNumber = 8,
    kIsJumpingFieldNumber = 9,
    kIsThrowpotionFieldNumber = 10,
    kIsSpawnpotionFieldNumber = 11,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // float x = 2;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 3;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 4;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // float yaw = 5;
  void clear_yaw();
  float yaw() const;
  void set_yaw(float value);
  private:
  float _internal_yaw() const;
  void _internal_set_yaw(float value);
  public:

  // .Protocol.MoveState state = 6;
  void clear_state();
  ::Protocol::MoveState state() const;
  void set_state(::Protocol::MoveState value);
  private:
  ::Protocol::MoveState _internal_state() const;
  void _internal_set_state(::Protocol::MoveState value);
  public:

  // bool is_aiming = 7;
  void clear_is_aiming();
  bool is_aiming() const;
  void set_is_aiming(bool value);
  private:
  bool _internal_is_aiming() const;
  void _internal_set_is_aiming(bool value);
  public:

  // bool is_holding = 8;
  void clear_is_holding();
  bool is_holding() const;
  void set_is_holding(bool value);
  private:
  bool _internal_is_holding() const;
  void _internal_set_is_holding(bool value);
  public:

  // bool is_jumping = 9;
  void clear_is_jumping();
  bool is_jumping() const;
  void set_is_jumping(bool value);
  private:
  bool _internal_is_jumping() const;
  void _internal_set_is_jumping(bool value);
  public:

  // bool is_throwpotion = 10;
  void clear_is_throwpotion();
  bool is_throwpotion() const;
  void set_is_throwpotion(bool value);
  private:
  bool _internal_is_throwpotion() const;
  void _internal_set_is_throwpotion(bool value);
  public:

  // bool is_spawnpotion = 11;
  void clear_is_spawnpotion();
  bool is_spawnpotion() const;
  void set_is_spawnpotion(bool value);
  private:
  bool _internal_is_spawnpotion() const;
  void _internal_set_is_spawnpotion(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PositionInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    float x_;
    float y_;
    float z_;
    float yaw_;
    int state_;
    bool is_aiming_;
    bool is_holding_;
    bool is_jumping_;
    bool is_throwpotion_;
    bool is_spawnpotion_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit PROTOBUF_CONSTEXPR PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlayerInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const PlayerInfo& from) {
    PlayerInfo::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipTypeFieldNumber = 2,
    kObjectIdFieldNumber = 1,
  };
  // .Protocol.Membership membership_type = 2;
  bool has_membership_type() const;
  private:
  bool _internal_has_membership_type() const;
  public:
  void clear_membership_type();
  const ::Protocol::Membership& membership_type() const;
  PROTOBUF_NODISCARD ::Protocol::Membership* release_membership_type();
  ::Protocol::Membership* mutable_membership_type();
  void set_allocated_membership_type(::Protocol::Membership* membership_type);
  private:
  const ::Protocol::Membership& _internal_membership_type() const;
  ::Protocol::Membership* _internal_mutable_membership_type();
  public:
  void unsafe_arena_set_allocated_membership_type(
      ::Protocol::Membership* membership_type);
  ::Protocol::Membership* unsafe_arena_release_membership_type();

  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::Protocol::Membership* membership_type_;
    uint64_t object_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// -------------------------------------------------------------------

class Membership final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.Membership) */ {
 public:
  inline Membership() : Membership(nullptr) {}
  ~Membership() override;
  explicit PROTOBUF_CONSTEXPR Membership(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Membership(const Membership& from);
  Membership(Membership&& from) noexcept
    : Membership() {
    *this = ::std::move(from);
  }

  inline Membership& operator=(const Membership& from) {
    CopyFrom(from);
    return *this;
  }
  inline Membership& operator=(Membership&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Membership& default_instance() {
    return *internal_default_instance();
  }
  static inline const Membership* internal_default_instance() {
    return reinterpret_cast<const Membership*>(
               &_Membership_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Membership& a, Membership& b) {
    a.Swap(&b);
  }
  inline void Swap(Membership* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Membership* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Membership* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Membership>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Membership& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Membership& from) {
    Membership::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Membership* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.Membership";
  }
  protected:
  explicit Membership(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdFieldNumber = 1,
    kPlayerTypeFieldNumber = 2,
  };
  // uint64 object_id = 1;
  void clear_object_id();
  uint64_t object_id() const;
  void set_object_id(uint64_t value);
  private:
  uint64_t _internal_object_id() const;
  void _internal_set_object_id(uint64_t value);
  public:

  // .Protocol.PlayerType player_type = 2;
  void clear_player_type();
  ::Protocol::PlayerType player_type() const;
  void set_player_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_player_type() const;
  void _internal_set_player_type(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.Membership)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    uint64_t object_id_;
    int player_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Struct_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PositionInfo

// uint64 object_id = 1;
inline void PositionInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t PositionInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t PositionInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.object_id)
  return _internal_object_id();
}
inline void PositionInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void PositionInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.object_id)
}

// float x = 2;
inline void PositionInfo::clear_x() {
  _impl_.x_ = 0;
}
inline float PositionInfo::_internal_x() const {
  return _impl_.x_;
}
inline float PositionInfo::x() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.x)
  return _internal_x();
}
inline void PositionInfo::_internal_set_x(float value) {
  
  _impl_.x_ = value;
}
inline void PositionInfo::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.x)
}

// float y = 3;
inline void PositionInfo::clear_y() {
  _impl_.y_ = 0;
}
inline float PositionInfo::_internal_y() const {
  return _impl_.y_;
}
inline float PositionInfo::y() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.y)
  return _internal_y();
}
inline void PositionInfo::_internal_set_y(float value) {
  
  _impl_.y_ = value;
}
inline void PositionInfo::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.y)
}

// float z = 4;
inline void PositionInfo::clear_z() {
  _impl_.z_ = 0;
}
inline float PositionInfo::_internal_z() const {
  return _impl_.z_;
}
inline float PositionInfo::z() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.z)
  return _internal_z();
}
inline void PositionInfo::_internal_set_z(float value) {
  
  _impl_.z_ = value;
}
inline void PositionInfo::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.z)
}

// float yaw = 5;
inline void PositionInfo::clear_yaw() {
  _impl_.yaw_ = 0;
}
inline float PositionInfo::_internal_yaw() const {
  return _impl_.yaw_;
}
inline float PositionInfo::yaw() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.yaw)
  return _internal_yaw();
}
inline void PositionInfo::_internal_set_yaw(float value) {
  
  _impl_.yaw_ = value;
}
inline void PositionInfo::set_yaw(float value) {
  _internal_set_yaw(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.yaw)
}

// .Protocol.MoveState state = 6;
inline void PositionInfo::clear_state() {
  _impl_.state_ = 0;
}
inline ::Protocol::MoveState PositionInfo::_internal_state() const {
  return static_cast< ::Protocol::MoveState >(_impl_.state_);
}
inline ::Protocol::MoveState PositionInfo::state() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.state)
  return _internal_state();
}
inline void PositionInfo::_internal_set_state(::Protocol::MoveState value) {
  
  _impl_.state_ = value;
}
inline void PositionInfo::set_state(::Protocol::MoveState value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.state)
}

// bool is_aiming = 7;
inline void PositionInfo::clear_is_aiming() {
  _impl_.is_aiming_ = false;
}
inline bool PositionInfo::_internal_is_aiming() const {
  return _impl_.is_aiming_;
}
inline bool PositionInfo::is_aiming() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.is_aiming)
  return _internal_is_aiming();
}
inline void PositionInfo::_internal_set_is_aiming(bool value) {
  
  _impl_.is_aiming_ = value;
}
inline void PositionInfo::set_is_aiming(bool value) {
  _internal_set_is_aiming(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.is_aiming)
}

// bool is_holding = 8;
inline void PositionInfo::clear_is_holding() {
  _impl_.is_holding_ = false;
}
inline bool PositionInfo::_internal_is_holding() const {
  return _impl_.is_holding_;
}
inline bool PositionInfo::is_holding() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.is_holding)
  return _internal_is_holding();
}
inline void PositionInfo::_internal_set_is_holding(bool value) {
  
  _impl_.is_holding_ = value;
}
inline void PositionInfo::set_is_holding(bool value) {
  _internal_set_is_holding(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.is_holding)
}

// bool is_jumping = 9;
inline void PositionInfo::clear_is_jumping() {
  _impl_.is_jumping_ = false;
}
inline bool PositionInfo::_internal_is_jumping() const {
  return _impl_.is_jumping_;
}
inline bool PositionInfo::is_jumping() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.is_jumping)
  return _internal_is_jumping();
}
inline void PositionInfo::_internal_set_is_jumping(bool value) {
  
  _impl_.is_jumping_ = value;
}
inline void PositionInfo::set_is_jumping(bool value) {
  _internal_set_is_jumping(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.is_jumping)
}

// bool is_throwpotion = 10;
inline void PositionInfo::clear_is_throwpotion() {
  _impl_.is_throwpotion_ = false;
}
inline bool PositionInfo::_internal_is_throwpotion() const {
  return _impl_.is_throwpotion_;
}
inline bool PositionInfo::is_throwpotion() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.is_throwpotion)
  return _internal_is_throwpotion();
}
inline void PositionInfo::_internal_set_is_throwpotion(bool value) {
  
  _impl_.is_throwpotion_ = value;
}
inline void PositionInfo::set_is_throwpotion(bool value) {
  _internal_set_is_throwpotion(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.is_throwpotion)
}

// bool is_spawnpotion = 11;
inline void PositionInfo::clear_is_spawnpotion() {
  _impl_.is_spawnpotion_ = false;
}
inline bool PositionInfo::_internal_is_spawnpotion() const {
  return _impl_.is_spawnpotion_;
}
inline bool PositionInfo::is_spawnpotion() const {
  // @@protoc_insertion_point(field_get:Protocol.PositionInfo.is_spawnpotion)
  return _internal_is_spawnpotion();
}
inline void PositionInfo::_internal_set_is_spawnpotion(bool value) {
  
  _impl_.is_spawnpotion_ = value;
}
inline void PositionInfo::set_is_spawnpotion(bool value) {
  _internal_set_is_spawnpotion(value);
  // @@protoc_insertion_point(field_set:Protocol.PositionInfo.is_spawnpotion)
}

// -------------------------------------------------------------------

// PlayerInfo

// uint64 object_id = 1;
inline void PlayerInfo::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t PlayerInfo::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t PlayerInfo::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.object_id)
  return _internal_object_id();
}
inline void PlayerInfo::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void PlayerInfo::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.PlayerInfo.object_id)
}

// .Protocol.Membership membership_type = 2;
inline bool PlayerInfo::_internal_has_membership_type() const {
  return this != internal_default_instance() && _impl_.membership_type_ != nullptr;
}
inline bool PlayerInfo::has_membership_type() const {
  return _internal_has_membership_type();
}
inline void PlayerInfo::clear_membership_type() {
  if (GetArenaForAllocation() == nullptr && _impl_.membership_type_ != nullptr) {
    delete _impl_.membership_type_;
  }
  _impl_.membership_type_ = nullptr;
}
inline const ::Protocol::Membership& PlayerInfo::_internal_membership_type() const {
  const ::Protocol::Membership* p = _impl_.membership_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::Protocol::Membership&>(
      ::Protocol::_Membership_default_instance_);
}
inline const ::Protocol::Membership& PlayerInfo::membership_type() const {
  // @@protoc_insertion_point(field_get:Protocol.PlayerInfo.membership_type)
  return _internal_membership_type();
}
inline void PlayerInfo::unsafe_arena_set_allocated_membership_type(
    ::Protocol::Membership* membership_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.membership_type_);
  }
  _impl_.membership_type_ = membership_type;
  if (membership_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Protocol.PlayerInfo.membership_type)
}
inline ::Protocol::Membership* PlayerInfo::release_membership_type() {
  
  ::Protocol::Membership* temp = _impl_.membership_type_;
  _impl_.membership_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::Protocol::Membership* PlayerInfo::unsafe_arena_release_membership_type() {
  // @@protoc_insertion_point(field_release:Protocol.PlayerInfo.membership_type)
  
  ::Protocol::Membership* temp = _impl_.membership_type_;
  _impl_.membership_type_ = nullptr;
  return temp;
}
inline ::Protocol::Membership* PlayerInfo::_internal_mutable_membership_type() {
  
  if (_impl_.membership_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::Protocol::Membership>(GetArenaForAllocation());
    _impl_.membership_type_ = p;
  }
  return _impl_.membership_type_;
}
inline ::Protocol::Membership* PlayerInfo::mutable_membership_type() {
  ::Protocol::Membership* _msg = _internal_mutable_membership_type();
  // @@protoc_insertion_point(field_mutable:Protocol.PlayerInfo.membership_type)
  return _msg;
}
inline void PlayerInfo::set_allocated_membership_type(::Protocol::Membership* membership_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.membership_type_;
  }
  if (membership_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(membership_type);
    if (message_arena != submessage_arena) {
      membership_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, membership_type, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.membership_type_ = membership_type;
  // @@protoc_insertion_point(field_set_allocated:Protocol.PlayerInfo.membership_type)
}

// -------------------------------------------------------------------

// Membership

// uint64 object_id = 1;
inline void Membership::clear_object_id() {
  _impl_.object_id_ = uint64_t{0u};
}
inline uint64_t Membership::_internal_object_id() const {
  return _impl_.object_id_;
}
inline uint64_t Membership::object_id() const {
  // @@protoc_insertion_point(field_get:Protocol.Membership.object_id)
  return _internal_object_id();
}
inline void Membership::_internal_set_object_id(uint64_t value) {
  
  _impl_.object_id_ = value;
}
inline void Membership::set_object_id(uint64_t value) {
  _internal_set_object_id(value);
  // @@protoc_insertion_point(field_set:Protocol.Membership.object_id)
}

// .Protocol.PlayerType player_type = 2;
inline void Membership::clear_player_type() {
  _impl_.player_type_ = 0;
}
inline ::Protocol::PlayerType Membership::_internal_player_type() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.player_type_);
}
inline ::Protocol::PlayerType Membership::player_type() const {
  // @@protoc_insertion_point(field_get:Protocol.Membership.player_type)
  return _internal_player_type();
}
inline void Membership::_internal_set_player_type(::Protocol::PlayerType value) {
  
  _impl_.player_type_ = value;
}
inline void Membership::set_player_type(::Protocol::PlayerType value) {
  _internal_set_player_type(value);
  // @@protoc_insertion_point(field_set:Protocol.Membership.player_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Struct_2eproto
