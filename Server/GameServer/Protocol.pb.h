// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "Enum.pb.h"
#include "Struct.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Protocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Protocol_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Protocol_2eproto;
namespace Protocol {
class C_CHAT;
struct C_CHATDefaultTypeInternal;
extern C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
class C_CREATE_ROOM;
struct C_CREATE_ROOMDefaultTypeInternal;
extern C_CREATE_ROOMDefaultTypeInternal _C_CREATE_ROOM_default_instance_;
class C_ENTER_ROOM;
struct C_ENTER_ROOMDefaultTypeInternal;
extern C_ENTER_ROOMDefaultTypeInternal _C_ENTER_ROOM_default_instance_;
class C_GAME_OVER;
struct C_GAME_OVERDefaultTypeInternal;
extern C_GAME_OVERDefaultTypeInternal _C_GAME_OVER_default_instance_;
class C_LEAVE_GAME;
struct C_LEAVE_GAMEDefaultTypeInternal;
extern C_LEAVE_GAMEDefaultTypeInternal _C_LEAVE_GAME_default_instance_;
class C_LOGIN;
struct C_LOGINDefaultTypeInternal;
extern C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
class C_MEMBERSHIP;
struct C_MEMBERSHIPDefaultTypeInternal;
extern C_MEMBERSHIPDefaultTypeInternal _C_MEMBERSHIP_default_instance_;
class C_PRIVATE_CHAT;
struct C_PRIVATE_CHATDefaultTypeInternal;
extern C_PRIVATE_CHATDefaultTypeInternal _C_PRIVATE_CHAT_default_instance_;
class C_PUBLIC_CHAT;
struct C_PUBLIC_CHATDefaultTypeInternal;
extern C_PUBLIC_CHATDefaultTypeInternal _C_PUBLIC_CHAT_default_instance_;
class S_CHAT;
struct S_CHATDefaultTypeInternal;
extern S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
class S_DESPAWN;
struct S_DESPAWNDefaultTypeInternal;
extern S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
class S_ENTER_GAME;
struct S_ENTER_GAMEDefaultTypeInternal;
extern S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
class S_ENTER_ROOM;
struct S_ENTER_ROOMDefaultTypeInternal;
extern S_ENTER_ROOMDefaultTypeInternal _S_ENTER_ROOM_default_instance_;
class S_LEAVE_GAME;
struct S_LEAVE_GAMEDefaultTypeInternal;
extern S_LEAVE_GAMEDefaultTypeInternal _S_LEAVE_GAME_default_instance_;
class S_LOGIN;
struct S_LOGINDefaultTypeInternal;
extern S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
class S_MEMBERSHIP;
struct S_MEMBERSHIPDefaultTypeInternal;
extern S_MEMBERSHIPDefaultTypeInternal _S_MEMBERSHIP_default_instance_;
class S_PRIVATE_CHAT;
struct S_PRIVATE_CHATDefaultTypeInternal;
extern S_PRIVATE_CHATDefaultTypeInternal _S_PRIVATE_CHAT_default_instance_;
class S_PUBLIC_CHAT;
struct S_PUBLIC_CHATDefaultTypeInternal;
extern S_PUBLIC_CHATDefaultTypeInternal _S_PUBLIC_CHAT_default_instance_;
class S_SPAWN;
struct S_SPAWNDefaultTypeInternal;
extern S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> ::Protocol::C_CHAT* Arena::CreateMaybeMessage<::Protocol::C_CHAT>(Arena*);
template<> ::Protocol::C_CREATE_ROOM* Arena::CreateMaybeMessage<::Protocol::C_CREATE_ROOM>(Arena*);
template<> ::Protocol::C_ENTER_ROOM* Arena::CreateMaybeMessage<::Protocol::C_ENTER_ROOM>(Arena*);
template<> ::Protocol::C_GAME_OVER* Arena::CreateMaybeMessage<::Protocol::C_GAME_OVER>(Arena*);
template<> ::Protocol::C_LEAVE_GAME* Arena::CreateMaybeMessage<::Protocol::C_LEAVE_GAME>(Arena*);
template<> ::Protocol::C_LOGIN* Arena::CreateMaybeMessage<::Protocol::C_LOGIN>(Arena*);
template<> ::Protocol::C_MEMBERSHIP* Arena::CreateMaybeMessage<::Protocol::C_MEMBERSHIP>(Arena*);
template<> ::Protocol::C_PRIVATE_CHAT* Arena::CreateMaybeMessage<::Protocol::C_PRIVATE_CHAT>(Arena*);
template<> ::Protocol::C_PUBLIC_CHAT* Arena::CreateMaybeMessage<::Protocol::C_PUBLIC_CHAT>(Arena*);
template<> ::Protocol::S_CHAT* Arena::CreateMaybeMessage<::Protocol::S_CHAT>(Arena*);
template<> ::Protocol::S_DESPAWN* Arena::CreateMaybeMessage<::Protocol::S_DESPAWN>(Arena*);
template<> ::Protocol::S_ENTER_GAME* Arena::CreateMaybeMessage<::Protocol::S_ENTER_GAME>(Arena*);
template<> ::Protocol::S_ENTER_ROOM* Arena::CreateMaybeMessage<::Protocol::S_ENTER_ROOM>(Arena*);
template<> ::Protocol::S_LEAVE_GAME* Arena::CreateMaybeMessage<::Protocol::S_LEAVE_GAME>(Arena*);
template<> ::Protocol::S_LOGIN* Arena::CreateMaybeMessage<::Protocol::S_LOGIN>(Arena*);
template<> ::Protocol::S_MEMBERSHIP* Arena::CreateMaybeMessage<::Protocol::S_MEMBERSHIP>(Arena*);
template<> ::Protocol::S_PRIVATE_CHAT* Arena::CreateMaybeMessage<::Protocol::S_PRIVATE_CHAT>(Arena*);
template<> ::Protocol::S_PUBLIC_CHAT* Arena::CreateMaybeMessage<::Protocol::S_PUBLIC_CHAT>(Arena*);
template<> ::Protocol::S_SPAWN* Arena::CreateMaybeMessage<::Protocol::S_SPAWN>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Protocol {

// ===================================================================

class C_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_LOGIN) */ {
 public:
  inline C_LOGIN() : C_LOGIN(nullptr) {}
  ~C_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR C_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LOGIN(const C_LOGIN& from);
  C_LOGIN(C_LOGIN&& from) noexcept
    : C_LOGIN() {
    *this = ::std::move(from);
  }

  inline C_LOGIN& operator=(const C_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LOGIN& operator=(C_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LOGIN* internal_default_instance() {
    return reinterpret_cast<const C_LOGIN*>(
               &_C_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(C_LOGIN& a, C_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_LOGIN& from) {
    C_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LOGIN";
  }
  protected:
  explicit C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 1,
  };
  // string membership_id = 1;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LOGIN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LOGIN) */ {
 public:
  inline S_LOGIN() : S_LOGIN(nullptr) {}
  ~S_LOGIN() override;
  explicit PROTOBUF_CONSTEXPR S_LOGIN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LOGIN(const S_LOGIN& from);
  S_LOGIN(S_LOGIN&& from) noexcept
    : S_LOGIN() {
    *this = ::std::move(from);
  }

  inline S_LOGIN& operator=(const S_LOGIN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LOGIN& operator=(S_LOGIN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LOGIN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LOGIN* internal_default_instance() {
    return reinterpret_cast<const S_LOGIN*>(
               &_S_LOGIN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(S_LOGIN& a, S_LOGIN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LOGIN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LOGIN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LOGIN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LOGIN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LOGIN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LOGIN& from) {
    S_LOGIN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LOGIN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LOGIN";
  }
  protected:
  explicit S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kMembershipTypeFieldNumber = 3,
  };
  // string membership_id = 2;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .Protocol.PlayerType membership_type = 3;
  void clear_membership_type();
  ::Protocol::PlayerType membership_type() const;
  void set_membership_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_membership_type() const;
  void _internal_set_membership_type(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LOGIN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    bool success_;
    int membership_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_MEMBERSHIP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_MEMBERSHIP) */ {
 public:
  inline C_MEMBERSHIP() : C_MEMBERSHIP(nullptr) {}
  ~C_MEMBERSHIP() override;
  explicit PROTOBUF_CONSTEXPR C_MEMBERSHIP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_MEMBERSHIP(const C_MEMBERSHIP& from);
  C_MEMBERSHIP(C_MEMBERSHIP&& from) noexcept
    : C_MEMBERSHIP() {
    *this = ::std::move(from);
  }

  inline C_MEMBERSHIP& operator=(const C_MEMBERSHIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_MEMBERSHIP& operator=(C_MEMBERSHIP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_MEMBERSHIP& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_MEMBERSHIP* internal_default_instance() {
    return reinterpret_cast<const C_MEMBERSHIP*>(
               &_C_MEMBERSHIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(C_MEMBERSHIP& a, C_MEMBERSHIP& b) {
    a.Swap(&b);
  }
  inline void Swap(C_MEMBERSHIP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_MEMBERSHIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_MEMBERSHIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_MEMBERSHIP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_MEMBERSHIP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_MEMBERSHIP& from) {
    C_MEMBERSHIP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_MEMBERSHIP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_MEMBERSHIP";
  }
  protected:
  explicit C_MEMBERSHIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 1,
    kMembershipTypeFieldNumber = 2,
  };
  // string membership_id = 1;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // .Protocol.PlayerType membership_type = 2;
  void clear_membership_type();
  ::Protocol::PlayerType membership_type() const;
  void set_membership_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_membership_type() const;
  void _internal_set_membership_type(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_MEMBERSHIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    int membership_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_MEMBERSHIP final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_MEMBERSHIP) */ {
 public:
  inline S_MEMBERSHIP() : S_MEMBERSHIP(nullptr) {}
  ~S_MEMBERSHIP() override;
  explicit PROTOBUF_CONSTEXPR S_MEMBERSHIP(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_MEMBERSHIP(const S_MEMBERSHIP& from);
  S_MEMBERSHIP(S_MEMBERSHIP&& from) noexcept
    : S_MEMBERSHIP() {
    *this = ::std::move(from);
  }

  inline S_MEMBERSHIP& operator=(const S_MEMBERSHIP& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_MEMBERSHIP& operator=(S_MEMBERSHIP&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_MEMBERSHIP& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_MEMBERSHIP* internal_default_instance() {
    return reinterpret_cast<const S_MEMBERSHIP*>(
               &_S_MEMBERSHIP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(S_MEMBERSHIP& a, S_MEMBERSHIP& b) {
    a.Swap(&b);
  }
  inline void Swap(S_MEMBERSHIP* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_MEMBERSHIP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_MEMBERSHIP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_MEMBERSHIP>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_MEMBERSHIP& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_MEMBERSHIP& from) {
    S_MEMBERSHIP::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_MEMBERSHIP* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_MEMBERSHIP";
  }
  protected:
  explicit S_MEMBERSHIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 2,
    kSuccessFieldNumber = 1,
    kMembershipTypeFieldNumber = 3,
  };
  // string membership_id = 2;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .Protocol.PlayerType membership_type = 3;
  void clear_membership_type();
  ::Protocol::PlayerType membership_type() const;
  void set_membership_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_membership_type() const;
  void _internal_set_membership_type(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_MEMBERSHIP)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    bool success_;
    int membership_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CREATE_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CREATE_ROOM) */ {
 public:
  inline C_CREATE_ROOM() : C_CREATE_ROOM(nullptr) {}
  ~C_CREATE_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CREATE_ROOM(const C_CREATE_ROOM& from);
  C_CREATE_ROOM(C_CREATE_ROOM&& from) noexcept
    : C_CREATE_ROOM() {
    *this = ::std::move(from);
  }

  inline C_CREATE_ROOM& operator=(const C_CREATE_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CREATE_ROOM& operator=(C_CREATE_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CREATE_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CREATE_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_CREATE_ROOM*>(
               &_C_CREATE_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(C_CREATE_ROOM& a, C_CREATE_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CREATE_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CREATE_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CREATE_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CREATE_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CREATE_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CREATE_ROOM& from) {
    C_CREATE_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CREATE_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CREATE_ROOM";
  }
  protected:
  explicit C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIpAddressFieldNumber = 1,
    kMembershipIdFieldNumber = 2,
    kMembershipTypeFieldNumber = 3,
    kSchoolTypeFieldNumber = 4,
  };
  // string ip_address = 1;
  void clear_ip_address();
  const std::string& ip_address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip_address();
  PROTOBUF_NODISCARD std::string* release_ip_address();
  void set_allocated_ip_address(std::string* ip_address);
  private:
  const std::string& _internal_ip_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip_address(const std::string& value);
  std::string* _internal_mutable_ip_address();
  public:

  // string membership_id = 2;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // .Protocol.PlayerType membership_type = 3;
  void clear_membership_type();
  ::Protocol::PlayerType membership_type() const;
  void set_membership_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_membership_type() const;
  void _internal_set_membership_type(::Protocol::PlayerType value);
  public:

  // .Protocol.SchoolType school_type = 4;
  void clear_school_type();
  ::Protocol::SchoolType school_type() const;
  void set_school_type(::Protocol::SchoolType value);
  private:
  ::Protocol::SchoolType _internal_school_type() const;
  void _internal_set_school_type(::Protocol::SchoolType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CREATE_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_address_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    int membership_type_;
    int school_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_ENTER_ROOM) */ {
 public:
  inline C_ENTER_ROOM() : C_ENTER_ROOM(nullptr) {}
  ~C_ENTER_ROOM() override;
  explicit PROTOBUF_CONSTEXPR C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_ENTER_ROOM(const C_ENTER_ROOM& from);
  C_ENTER_ROOM(C_ENTER_ROOM&& from) noexcept
    : C_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline C_ENTER_ROOM& operator=(const C_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_ENTER_ROOM& operator=(C_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const C_ENTER_ROOM*>(
               &_C_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(C_ENTER_ROOM& a, C_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(C_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_ENTER_ROOM& from) {
    C_ENTER_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_ENTER_ROOM";
  }
  protected:
  explicit C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 1,
    kMembershipTypeFieldNumber = 2,
    kSchoolTypeFieldNumber = 3,
  };
  // string membership_id = 1;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // .Protocol.PlayerType membership_type = 2;
  void clear_membership_type();
  ::Protocol::PlayerType membership_type() const;
  void set_membership_type(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_membership_type() const;
  void _internal_set_membership_type(::Protocol::PlayerType value);
  public:

  // .Protocol.SchoolType school_type = 3;
  void clear_school_type();
  ::Protocol::SchoolType school_type() const;
  void set_school_type(::Protocol::SchoolType value);
  private:
  ::Protocol::SchoolType _internal_school_type() const;
  void _internal_set_school_type(::Protocol::SchoolType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    int membership_type_;
    int school_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_ROOM final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_ROOM) */ {
 public:
  inline S_ENTER_ROOM() : S_ENTER_ROOM(nullptr) {}
  ~S_ENTER_ROOM() override;
  explicit PROTOBUF_CONSTEXPR S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_ROOM(const S_ENTER_ROOM& from);
  S_ENTER_ROOM(S_ENTER_ROOM&& from) noexcept
    : S_ENTER_ROOM() {
    *this = ::std::move(from);
  }

  inline S_ENTER_ROOM& operator=(const S_ENTER_ROOM& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_ROOM& operator=(S_ENTER_ROOM&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_ROOM& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_ROOM* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_ROOM*>(
               &_S_ENTER_ROOM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(S_ENTER_ROOM& a, S_ENTER_ROOM& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_ROOM* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_ROOM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_ROOM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_ROOM>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENTER_ROOM& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ENTER_ROOM& from) {
    S_ENTER_ROOM::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_ROOM* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_ROOM";
  }
  protected:
  explicit S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_ROOM)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    bool success_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_ENTER_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_ENTER_GAME) */ {
 public:
  inline S_ENTER_GAME() : S_ENTER_GAME(nullptr) {}
  ~S_ENTER_GAME() override;
  explicit PROTOBUF_CONSTEXPR S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_ENTER_GAME(const S_ENTER_GAME& from);
  S_ENTER_GAME(S_ENTER_GAME&& from) noexcept
    : S_ENTER_GAME() {
    *this = ::std::move(from);
  }

  inline S_ENTER_GAME& operator=(const S_ENTER_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_ENTER_GAME& operator=(S_ENTER_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_ENTER_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_ENTER_GAME* internal_default_instance() {
    return reinterpret_cast<const S_ENTER_GAME*>(
               &_S_ENTER_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(S_ENTER_GAME& a, S_ENTER_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_ENTER_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_ENTER_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_ENTER_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_ENTER_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_ENTER_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_ENTER_GAME& from) {
    S_ENTER_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_ENTER_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_ENTER_GAME";
  }
  protected:
  explicit S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipId0FieldNumber = 2,
    kMembershipId1FieldNumber = 4,
    kMembershipId2FieldNumber = 6,
    kServerIpFieldNumber = 8,
    kSuccessFieldNumber = 1,
    kMembershipType0FieldNumber = 3,
    kMembershipType1FieldNumber = 5,
    kMembershipType2FieldNumber = 7,
  };
  // string membership_id_0 = 2;
  void clear_membership_id_0();
  const std::string& membership_id_0() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id_0(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id_0();
  PROTOBUF_NODISCARD std::string* release_membership_id_0();
  void set_allocated_membership_id_0(std::string* membership_id_0);
  private:
  const std::string& _internal_membership_id_0() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id_0(const std::string& value);
  std::string* _internal_mutable_membership_id_0();
  public:

  // string membership_id_1 = 4;
  void clear_membership_id_1();
  const std::string& membership_id_1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id_1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id_1();
  PROTOBUF_NODISCARD std::string* release_membership_id_1();
  void set_allocated_membership_id_1(std::string* membership_id_1);
  private:
  const std::string& _internal_membership_id_1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id_1(const std::string& value);
  std::string* _internal_mutable_membership_id_1();
  public:

  // string membership_id_2 = 6;
  void clear_membership_id_2();
  const std::string& membership_id_2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id_2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id_2();
  PROTOBUF_NODISCARD std::string* release_membership_id_2();
  void set_allocated_membership_id_2(std::string* membership_id_2);
  private:
  const std::string& _internal_membership_id_2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id_2(const std::string& value);
  std::string* _internal_mutable_membership_id_2();
  public:

  // string server_ip = 8;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_NODISCARD std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // .Protocol.PlayerType membership_type_0 = 3;
  void clear_membership_type_0();
  ::Protocol::PlayerType membership_type_0() const;
  void set_membership_type_0(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_membership_type_0() const;
  void _internal_set_membership_type_0(::Protocol::PlayerType value);
  public:

  // .Protocol.PlayerType membership_type_1 = 5;
  void clear_membership_type_1();
  ::Protocol::PlayerType membership_type_1() const;
  void set_membership_type_1(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_membership_type_1() const;
  void _internal_set_membership_type_1(::Protocol::PlayerType value);
  public:

  // .Protocol.PlayerType membership_type_2 = 7;
  void clear_membership_type_2();
  ::Protocol::PlayerType membership_type_2() const;
  void set_membership_type_2(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_membership_type_2() const;
  void _internal_set_membership_type_2(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_ENTER_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_0_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_1_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_2_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
    bool success_;
    int membership_type_0_;
    int membership_type_1_;
    int membership_type_2_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_GAME_OVER final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_GAME_OVER) */ {
 public:
  inline C_GAME_OVER() : C_GAME_OVER(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_GAME_OVER(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_GAME_OVER(const C_GAME_OVER& from);
  C_GAME_OVER(C_GAME_OVER&& from) noexcept
    : C_GAME_OVER() {
    *this = ::std::move(from);
  }

  inline C_GAME_OVER& operator=(const C_GAME_OVER& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_GAME_OVER& operator=(C_GAME_OVER&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_GAME_OVER& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_GAME_OVER* internal_default_instance() {
    return reinterpret_cast<const C_GAME_OVER*>(
               &_C_GAME_OVER_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(C_GAME_OVER& a, C_GAME_OVER& b) {
    a.Swap(&b);
  }
  inline void Swap(C_GAME_OVER* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_GAME_OVER* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_GAME_OVER* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_GAME_OVER>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_GAME_OVER& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_GAME_OVER& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_GAME_OVER";
  }
  protected:
  explicit C_GAME_OVER(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_GAME_OVER)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_LEAVE_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:Protocol.C_LEAVE_GAME) */ {
 public:
  inline C_LEAVE_GAME() : C_LEAVE_GAME(nullptr) {}
  explicit PROTOBUF_CONSTEXPR C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_LEAVE_GAME(const C_LEAVE_GAME& from);
  C_LEAVE_GAME(C_LEAVE_GAME&& from) noexcept
    : C_LEAVE_GAME() {
    *this = ::std::move(from);
  }

  inline C_LEAVE_GAME& operator=(const C_LEAVE_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_LEAVE_GAME& operator=(C_LEAVE_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_LEAVE_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_LEAVE_GAME* internal_default_instance() {
    return reinterpret_cast<const C_LEAVE_GAME*>(
               &_C_LEAVE_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(C_LEAVE_GAME& a, C_LEAVE_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(C_LEAVE_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_LEAVE_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_LEAVE_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_LEAVE_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const C_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const C_LEAVE_GAME& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_LEAVE_GAME";
  }
  protected:
  explicit C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Protocol.C_LEAVE_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
  };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_LEAVE_GAME final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_LEAVE_GAME) */ {
 public:
  inline S_LEAVE_GAME() : S_LEAVE_GAME(nullptr) {}
  ~S_LEAVE_GAME() override;
  explicit PROTOBUF_CONSTEXPR S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_LEAVE_GAME(const S_LEAVE_GAME& from);
  S_LEAVE_GAME(S_LEAVE_GAME&& from) noexcept
    : S_LEAVE_GAME() {
    *this = ::std::move(from);
  }

  inline S_LEAVE_GAME& operator=(const S_LEAVE_GAME& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_LEAVE_GAME& operator=(S_LEAVE_GAME&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_LEAVE_GAME& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_LEAVE_GAME* internal_default_instance() {
    return reinterpret_cast<const S_LEAVE_GAME*>(
               &_S_LEAVE_GAME_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(S_LEAVE_GAME& a, S_LEAVE_GAME& b) {
    a.Swap(&b);
  }
  inline void Swap(S_LEAVE_GAME* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_LEAVE_GAME* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_LEAVE_GAME* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_LEAVE_GAME>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_LEAVE_GAME& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_LEAVE_GAME& from) {
    S_LEAVE_GAME::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_LEAVE_GAME* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_LEAVE_GAME";
  }
  protected:
  explicit S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAFieldNumber = 1,
    kBFieldNumber = 2,
  };
  // string a = 1;
  void clear_a();
  const std::string& a() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a();
  PROTOBUF_NODISCARD std::string* release_a();
  void set_allocated_a(std::string* a);
  private:
  const std::string& _internal_a() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a(const std::string& value);
  std::string* _internal_mutable_a();
  public:

  // .Protocol.PlayerType b = 2;
  void clear_b();
  ::Protocol::PlayerType b() const;
  void set_b(::Protocol::PlayerType value);
  private:
  ::Protocol::PlayerType _internal_b() const;
  void _internal_set_b(::Protocol::PlayerType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_LEAVE_GAME)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a_;
    int b_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_SPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_SPAWN) */ {
 public:
  inline S_SPAWN() : S_SPAWN(nullptr) {}
  ~S_SPAWN() override;
  explicit PROTOBUF_CONSTEXPR S_SPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_SPAWN(const S_SPAWN& from);
  S_SPAWN(S_SPAWN&& from) noexcept
    : S_SPAWN() {
    *this = ::std::move(from);
  }

  inline S_SPAWN& operator=(const S_SPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_SPAWN& operator=(S_SPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_SPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_SPAWN* internal_default_instance() {
    return reinterpret_cast<const S_SPAWN*>(
               &_S_SPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(S_SPAWN& a, S_SPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_SPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_SPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_SPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_SPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_SPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_SPAWN& from) {
    S_SPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_SPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_SPAWN";
  }
  protected:
  explicit S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayersFieldNumber = 1,
  };
  // repeated .Protocol.PlayerInfo players = 1;
  int players_size() const;
  private:
  int _internal_players_size() const;
  public:
  void clear_players();
  ::Protocol::PlayerInfo* mutable_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
      mutable_players();
  private:
  const ::Protocol::PlayerInfo& _internal_players(int index) const;
  ::Protocol::PlayerInfo* _internal_add_players();
  public:
  const ::Protocol::PlayerInfo& players(int index) const;
  ::Protocol::PlayerInfo* add_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
      players() const;

  // @@protoc_insertion_point(class_scope:Protocol.S_SPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo > players_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_DESPAWN final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_DESPAWN) */ {
 public:
  inline S_DESPAWN() : S_DESPAWN(nullptr) {}
  ~S_DESPAWN() override;
  explicit PROTOBUF_CONSTEXPR S_DESPAWN(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_DESPAWN(const S_DESPAWN& from);
  S_DESPAWN(S_DESPAWN&& from) noexcept
    : S_DESPAWN() {
    *this = ::std::move(from);
  }

  inline S_DESPAWN& operator=(const S_DESPAWN& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_DESPAWN& operator=(S_DESPAWN&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_DESPAWN& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_DESPAWN* internal_default_instance() {
    return reinterpret_cast<const S_DESPAWN*>(
               &_S_DESPAWN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(S_DESPAWN& a, S_DESPAWN& b) {
    a.Swap(&b);
  }
  inline void Swap(S_DESPAWN* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_DESPAWN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_DESPAWN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_DESPAWN>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_DESPAWN& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_DESPAWN& from) {
    S_DESPAWN::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_DESPAWN* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_DESPAWN";
  }
  protected:
  explicit S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectIdsFieldNumber = 1,
  };
  // repeated uint64 object_ids = 1;
  int object_ids_size() const;
  private:
  int _internal_object_ids_size() const;
  public:
  void clear_object_ids();
  private:
  uint64_t _internal_object_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_object_ids() const;
  void _internal_add_object_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_object_ids();
  public:
  uint64_t object_ids(int index) const;
  void set_object_ids(int index, uint64_t value);
  void add_object_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      object_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_object_ids();

  // @@protoc_insertion_point(class_scope:Protocol.S_DESPAWN)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > object_ids_;
    mutable std::atomic<int> _object_ids_cached_byte_size_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_CHAT) */ {
 public:
  inline C_CHAT() : C_CHAT(nullptr) {}
  ~C_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_CHAT(const C_CHAT& from);
  C_CHAT(C_CHAT&& from) noexcept
    : C_CHAT() {
    *this = ::std::move(from);
  }

  inline C_CHAT& operator=(const C_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_CHAT& operator=(C_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_CHAT*>(
               &_C_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(C_CHAT& a, C_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_CHAT& from) {
    C_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_CHAT";
  }
  protected:
  explicit C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_CHAT) */ {
 public:
  inline S_CHAT() : S_CHAT(nullptr) {}
  ~S_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_CHAT(const S_CHAT& from);
  S_CHAT(S_CHAT&& from) noexcept
    : S_CHAT() {
    *this = ::std::move(from);
  }

  inline S_CHAT& operator=(const S_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_CHAT& operator=(S_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_CHAT*>(
               &_S_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(S_CHAT& a, S_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_CHAT& from) {
    S_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_CHAT";
  }
  protected:
  explicit S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // uint64 playerId = 1;
  void clear_playerid();
  uint64_t playerid() const;
  void set_playerid(uint64_t value);
  private:
  uint64_t _internal_playerid() const;
  void _internal_set_playerid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    uint64_t playerid_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PUBLIC_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PUBLIC_CHAT) */ {
 public:
  inline C_PUBLIC_CHAT() : C_PUBLIC_CHAT(nullptr) {}
  ~C_PUBLIC_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C_PUBLIC_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PUBLIC_CHAT(const C_PUBLIC_CHAT& from);
  C_PUBLIC_CHAT(C_PUBLIC_CHAT&& from) noexcept
    : C_PUBLIC_CHAT() {
    *this = ::std::move(from);
  }

  inline C_PUBLIC_CHAT& operator=(const C_PUBLIC_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PUBLIC_CHAT& operator=(C_PUBLIC_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PUBLIC_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PUBLIC_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_PUBLIC_CHAT*>(
               &_C_PUBLIC_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(C_PUBLIC_CHAT& a, C_PUBLIC_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PUBLIC_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PUBLIC_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PUBLIC_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PUBLIC_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PUBLIC_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PUBLIC_CHAT& from) {
    C_PUBLIC_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PUBLIC_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PUBLIC_CHAT";
  }
  protected:
  explicit C_PUBLIC_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 1,
    kMsgFieldNumber = 2,
    kMsgNumFieldNumber = 3,
  };
  // string membership_id = 1;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string msg_num = 3;
  void clear_msg_num();
  const std::string& msg_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_num();
  PROTOBUF_NODISCARD std::string* release_msg_num();
  void set_allocated_msg_num(std::string* msg_num);
  private:
  const std::string& _internal_msg_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_num(const std::string& value);
  std::string* _internal_mutable_msg_num();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PUBLIC_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PUBLIC_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PUBLIC_CHAT) */ {
 public:
  inline S_PUBLIC_CHAT() : S_PUBLIC_CHAT(nullptr) {}
  ~S_PUBLIC_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_PUBLIC_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PUBLIC_CHAT(const S_PUBLIC_CHAT& from);
  S_PUBLIC_CHAT(S_PUBLIC_CHAT&& from) noexcept
    : S_PUBLIC_CHAT() {
    *this = ::std::move(from);
  }

  inline S_PUBLIC_CHAT& operator=(const S_PUBLIC_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PUBLIC_CHAT& operator=(S_PUBLIC_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PUBLIC_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PUBLIC_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_PUBLIC_CHAT*>(
               &_S_PUBLIC_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(S_PUBLIC_CHAT& a, S_PUBLIC_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PUBLIC_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PUBLIC_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PUBLIC_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PUBLIC_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PUBLIC_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PUBLIC_CHAT& from) {
    S_PUBLIC_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PUBLIC_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PUBLIC_CHAT";
  }
  protected:
  explicit S_PUBLIC_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 1,
    kMsgFieldNumber = 2,
    kMsgNumFieldNumber = 3,
  };
  // string membership_id = 1;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string msg_num = 3;
  void clear_msg_num();
  const std::string& msg_num() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_num(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_num();
  PROTOBUF_NODISCARD std::string* release_msg_num();
  void set_allocated_msg_num(std::string* msg_num);
  private:
  const std::string& _internal_msg_num() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_num(const std::string& value);
  std::string* _internal_mutable_msg_num();
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PUBLIC_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_num_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class C_PRIVATE_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.C_PRIVATE_CHAT) */ {
 public:
  inline C_PRIVATE_CHAT() : C_PRIVATE_CHAT(nullptr) {}
  ~C_PRIVATE_CHAT() override;
  explicit PROTOBUF_CONSTEXPR C_PRIVATE_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  C_PRIVATE_CHAT(const C_PRIVATE_CHAT& from);
  C_PRIVATE_CHAT(C_PRIVATE_CHAT&& from) noexcept
    : C_PRIVATE_CHAT() {
    *this = ::std::move(from);
  }

  inline C_PRIVATE_CHAT& operator=(const C_PRIVATE_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline C_PRIVATE_CHAT& operator=(C_PRIVATE_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const C_PRIVATE_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const C_PRIVATE_CHAT* internal_default_instance() {
    return reinterpret_cast<const C_PRIVATE_CHAT*>(
               &_C_PRIVATE_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(C_PRIVATE_CHAT& a, C_PRIVATE_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(C_PRIVATE_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(C_PRIVATE_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  C_PRIVATE_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<C_PRIVATE_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const C_PRIVATE_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const C_PRIVATE_CHAT& from) {
    C_PRIVATE_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(C_PRIVATE_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.C_PRIVATE_CHAT";
  }
  protected:
  explicit C_PRIVATE_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 1,
    kMsgFieldNumber = 2,
    kMembershipTypeFieldNumber = 3,
  };
  // string membership_id = 1;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .Protocol.SchoolType membership_type = 3;
  void clear_membership_type();
  ::Protocol::SchoolType membership_type() const;
  void set_membership_type(::Protocol::SchoolType value);
  private:
  ::Protocol::SchoolType _internal_membership_type() const;
  void _internal_set_membership_type(::Protocol::SchoolType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.C_PRIVATE_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int membership_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// -------------------------------------------------------------------

class S_PRIVATE_CHAT final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Protocol.S_PRIVATE_CHAT) */ {
 public:
  inline S_PRIVATE_CHAT() : S_PRIVATE_CHAT(nullptr) {}
  ~S_PRIVATE_CHAT() override;
  explicit PROTOBUF_CONSTEXPR S_PRIVATE_CHAT(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  S_PRIVATE_CHAT(const S_PRIVATE_CHAT& from);
  S_PRIVATE_CHAT(S_PRIVATE_CHAT&& from) noexcept
    : S_PRIVATE_CHAT() {
    *this = ::std::move(from);
  }

  inline S_PRIVATE_CHAT& operator=(const S_PRIVATE_CHAT& from) {
    CopyFrom(from);
    return *this;
  }
  inline S_PRIVATE_CHAT& operator=(S_PRIVATE_CHAT&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const S_PRIVATE_CHAT& default_instance() {
    return *internal_default_instance();
  }
  static inline const S_PRIVATE_CHAT* internal_default_instance() {
    return reinterpret_cast<const S_PRIVATE_CHAT*>(
               &_S_PRIVATE_CHAT_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(S_PRIVATE_CHAT& a, S_PRIVATE_CHAT& b) {
    a.Swap(&b);
  }
  inline void Swap(S_PRIVATE_CHAT* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(S_PRIVATE_CHAT* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  S_PRIVATE_CHAT* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<S_PRIVATE_CHAT>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const S_PRIVATE_CHAT& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const S_PRIVATE_CHAT& from) {
    S_PRIVATE_CHAT::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(S_PRIVATE_CHAT* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Protocol.S_PRIVATE_CHAT";
  }
  protected:
  explicit S_PRIVATE_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMembershipIdFieldNumber = 1,
    kMsgFieldNumber = 2,
    kMembershipTypeFieldNumber = 3,
  };
  // string membership_id = 1;
  void clear_membership_id();
  const std::string& membership_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_membership_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_membership_id();
  PROTOBUF_NODISCARD std::string* release_membership_id();
  void set_allocated_membership_id(std::string* membership_id);
  private:
  const std::string& _internal_membership_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_membership_id(const std::string& value);
  std::string* _internal_mutable_membership_id();
  public:

  // string msg = 2;
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_NODISCARD std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // .Protocol.SchoolType membership_type = 3;
  void clear_membership_type();
  ::Protocol::SchoolType membership_type() const;
  void set_membership_type(::Protocol::SchoolType value);
  private:
  ::Protocol::SchoolType _internal_membership_type() const;
  void _internal_set_membership_type(::Protocol::SchoolType value);
  public:

  // @@protoc_insertion_point(class_scope:Protocol.S_PRIVATE_CHAT)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr membership_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
    int membership_type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_Protocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// C_LOGIN

// string membership_id = 1;
inline void C_LOGIN::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& C_LOGIN::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_LOGIN.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_LOGIN::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_LOGIN.membership_id)
}
inline std::string* C_LOGIN::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_LOGIN.membership_id)
  return _s;
}
inline const std::string& C_LOGIN::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void C_LOGIN::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_LOGIN::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_LOGIN::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_LOGIN.membership_id)
  return _impl_.membership_id_.Release();
}
inline void C_LOGIN::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_LOGIN.membership_id)
}

// -------------------------------------------------------------------

// S_LOGIN

// bool success = 1;
inline void S_LOGIN::clear_success() {
  _impl_.success_ = false;
}
inline bool S_LOGIN::_internal_success() const {
  return _impl_.success_;
}
inline bool S_LOGIN::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.success)
  return _internal_success();
}
inline void S_LOGIN::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_LOGIN::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.success)
}

// string membership_id = 2;
inline void S_LOGIN::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& S_LOGIN::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LOGIN::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.membership_id)
}
inline std::string* S_LOGIN::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S_LOGIN.membership_id)
  return _s;
}
inline const std::string& S_LOGIN::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void S_LOGIN::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S_LOGIN::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S_LOGIN::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_LOGIN.membership_id)
  return _impl_.membership_id_.Release();
}
inline void S_LOGIN::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LOGIN.membership_id)
}

// .Protocol.PlayerType membership_type = 3;
inline void S_LOGIN::clear_membership_type() {
  _impl_.membership_type_ = 0;
}
inline ::Protocol::PlayerType S_LOGIN::_internal_membership_type() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.membership_type_);
}
inline ::Protocol::PlayerType S_LOGIN::membership_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LOGIN.membership_type)
  return _internal_membership_type();
}
inline void S_LOGIN::_internal_set_membership_type(::Protocol::PlayerType value) {
  
  _impl_.membership_type_ = value;
}
inline void S_LOGIN::set_membership_type(::Protocol::PlayerType value) {
  _internal_set_membership_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LOGIN.membership_type)
}

// -------------------------------------------------------------------

// C_MEMBERSHIP

// string membership_id = 1;
inline void C_MEMBERSHIP::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& C_MEMBERSHIP::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MEMBERSHIP.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_MEMBERSHIP::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_MEMBERSHIP.membership_id)
}
inline std::string* C_MEMBERSHIP::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_MEMBERSHIP.membership_id)
  return _s;
}
inline const std::string& C_MEMBERSHIP::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void C_MEMBERSHIP::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_MEMBERSHIP::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_MEMBERSHIP::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_MEMBERSHIP.membership_id)
  return _impl_.membership_id_.Release();
}
inline void C_MEMBERSHIP::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_MEMBERSHIP.membership_id)
}

// .Protocol.PlayerType membership_type = 2;
inline void C_MEMBERSHIP::clear_membership_type() {
  _impl_.membership_type_ = 0;
}
inline ::Protocol::PlayerType C_MEMBERSHIP::_internal_membership_type() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.membership_type_);
}
inline ::Protocol::PlayerType C_MEMBERSHIP::membership_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_MEMBERSHIP.membership_type)
  return _internal_membership_type();
}
inline void C_MEMBERSHIP::_internal_set_membership_type(::Protocol::PlayerType value) {
  
  _impl_.membership_type_ = value;
}
inline void C_MEMBERSHIP::set_membership_type(::Protocol::PlayerType value) {
  _internal_set_membership_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_MEMBERSHIP.membership_type)
}

// -------------------------------------------------------------------

// S_MEMBERSHIP

// bool success = 1;
inline void S_MEMBERSHIP::clear_success() {
  _impl_.success_ = false;
}
inline bool S_MEMBERSHIP::_internal_success() const {
  return _impl_.success_;
}
inline bool S_MEMBERSHIP::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MEMBERSHIP.success)
  return _internal_success();
}
inline void S_MEMBERSHIP::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_MEMBERSHIP::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MEMBERSHIP.success)
}

// string membership_id = 2;
inline void S_MEMBERSHIP::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& S_MEMBERSHIP::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MEMBERSHIP.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_MEMBERSHIP::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_MEMBERSHIP.membership_id)
}
inline std::string* S_MEMBERSHIP::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S_MEMBERSHIP.membership_id)
  return _s;
}
inline const std::string& S_MEMBERSHIP::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void S_MEMBERSHIP::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S_MEMBERSHIP::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S_MEMBERSHIP::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_MEMBERSHIP.membership_id)
  return _impl_.membership_id_.Release();
}
inline void S_MEMBERSHIP::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_MEMBERSHIP.membership_id)
}

// .Protocol.PlayerType membership_type = 3;
inline void S_MEMBERSHIP::clear_membership_type() {
  _impl_.membership_type_ = 0;
}
inline ::Protocol::PlayerType S_MEMBERSHIP::_internal_membership_type() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.membership_type_);
}
inline ::Protocol::PlayerType S_MEMBERSHIP::membership_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_MEMBERSHIP.membership_type)
  return _internal_membership_type();
}
inline void S_MEMBERSHIP::_internal_set_membership_type(::Protocol::PlayerType value) {
  
  _impl_.membership_type_ = value;
}
inline void S_MEMBERSHIP::set_membership_type(::Protocol::PlayerType value) {
  _internal_set_membership_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_MEMBERSHIP.membership_type)
}

// -------------------------------------------------------------------

// C_CREATE_ROOM

// string ip_address = 1;
inline void C_CREATE_ROOM::clear_ip_address() {
  _impl_.ip_address_.ClearToEmpty();
}
inline const std::string& C_CREATE_ROOM::ip_address() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ROOM.ip_address)
  return _internal_ip_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_ROOM::set_ip_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.ip_address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ROOM.ip_address)
}
inline std::string* C_CREATE_ROOM::mutable_ip_address() {
  std::string* _s = _internal_mutable_ip_address();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE_ROOM.ip_address)
  return _s;
}
inline const std::string& C_CREATE_ROOM::_internal_ip_address() const {
  return _impl_.ip_address_.Get();
}
inline void C_CREATE_ROOM::_internal_set_ip_address(const std::string& value) {
  
  _impl_.ip_address_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM::_internal_mutable_ip_address() {
  
  return _impl_.ip_address_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM::release_ip_address() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE_ROOM.ip_address)
  return _impl_.ip_address_.Release();
}
inline void C_CREATE_ROOM::set_allocated_ip_address(std::string* ip_address) {
  if (ip_address != nullptr) {
    
  } else {
    
  }
  _impl_.ip_address_.SetAllocated(ip_address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.ip_address_.IsDefault()) {
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE_ROOM.ip_address)
}

// string membership_id = 2;
inline void C_CREATE_ROOM::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& C_CREATE_ROOM::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ROOM.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CREATE_ROOM::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ROOM.membership_id)
}
inline std::string* C_CREATE_ROOM::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CREATE_ROOM.membership_id)
  return _s;
}
inline const std::string& C_CREATE_ROOM::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void C_CREATE_ROOM::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CREATE_ROOM::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_CREATE_ROOM.membership_id)
  return _impl_.membership_id_.Release();
}
inline void C_CREATE_ROOM::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CREATE_ROOM.membership_id)
}

// .Protocol.PlayerType membership_type = 3;
inline void C_CREATE_ROOM::clear_membership_type() {
  _impl_.membership_type_ = 0;
}
inline ::Protocol::PlayerType C_CREATE_ROOM::_internal_membership_type() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.membership_type_);
}
inline ::Protocol::PlayerType C_CREATE_ROOM::membership_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ROOM.membership_type)
  return _internal_membership_type();
}
inline void C_CREATE_ROOM::_internal_set_membership_type(::Protocol::PlayerType value) {
  
  _impl_.membership_type_ = value;
}
inline void C_CREATE_ROOM::set_membership_type(::Protocol::PlayerType value) {
  _internal_set_membership_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ROOM.membership_type)
}

// .Protocol.SchoolType school_type = 4;
inline void C_CREATE_ROOM::clear_school_type() {
  _impl_.school_type_ = 0;
}
inline ::Protocol::SchoolType C_CREATE_ROOM::_internal_school_type() const {
  return static_cast< ::Protocol::SchoolType >(_impl_.school_type_);
}
inline ::Protocol::SchoolType C_CREATE_ROOM::school_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CREATE_ROOM.school_type)
  return _internal_school_type();
}
inline void C_CREATE_ROOM::_internal_set_school_type(::Protocol::SchoolType value) {
  
  _impl_.school_type_ = value;
}
inline void C_CREATE_ROOM::set_school_type(::Protocol::SchoolType value) {
  _internal_set_school_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_CREATE_ROOM.school_type)
}

// -------------------------------------------------------------------

// C_ENTER_ROOM

// string membership_id = 1;
inline void C_ENTER_ROOM::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& C_ENTER_ROOM::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_ROOM.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_ENTER_ROOM::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_ROOM.membership_id)
}
inline std::string* C_ENTER_ROOM::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_ENTER_ROOM.membership_id)
  return _s;
}
inline const std::string& C_ENTER_ROOM::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void C_ENTER_ROOM::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_ENTER_ROOM::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_ENTER_ROOM::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_ENTER_ROOM.membership_id)
  return _impl_.membership_id_.Release();
}
inline void C_ENTER_ROOM::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_ENTER_ROOM.membership_id)
}

// .Protocol.PlayerType membership_type = 2;
inline void C_ENTER_ROOM::clear_membership_type() {
  _impl_.membership_type_ = 0;
}
inline ::Protocol::PlayerType C_ENTER_ROOM::_internal_membership_type() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.membership_type_);
}
inline ::Protocol::PlayerType C_ENTER_ROOM::membership_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_ROOM.membership_type)
  return _internal_membership_type();
}
inline void C_ENTER_ROOM::_internal_set_membership_type(::Protocol::PlayerType value) {
  
  _impl_.membership_type_ = value;
}
inline void C_ENTER_ROOM::set_membership_type(::Protocol::PlayerType value) {
  _internal_set_membership_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_ROOM.membership_type)
}

// .Protocol.SchoolType school_type = 3;
inline void C_ENTER_ROOM::clear_school_type() {
  _impl_.school_type_ = 0;
}
inline ::Protocol::SchoolType C_ENTER_ROOM::_internal_school_type() const {
  return static_cast< ::Protocol::SchoolType >(_impl_.school_type_);
}
inline ::Protocol::SchoolType C_ENTER_ROOM::school_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_ENTER_ROOM.school_type)
  return _internal_school_type();
}
inline void C_ENTER_ROOM::_internal_set_school_type(::Protocol::SchoolType value) {
  
  _impl_.school_type_ = value;
}
inline void C_ENTER_ROOM::set_school_type(::Protocol::SchoolType value) {
  _internal_set_school_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_ENTER_ROOM.school_type)
}

// -------------------------------------------------------------------

// S_ENTER_ROOM

// bool success = 1;
inline void S_ENTER_ROOM::clear_success() {
  _impl_.success_ = false;
}
inline bool S_ENTER_ROOM::_internal_success() const {
  return _impl_.success_;
}
inline bool S_ENTER_ROOM::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_ROOM.success)
  return _internal_success();
}
inline void S_ENTER_ROOM::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_ENTER_ROOM::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_ROOM.success)
}

// -------------------------------------------------------------------

// S_ENTER_GAME

// bool success = 1;
inline void S_ENTER_GAME::clear_success() {
  _impl_.success_ = false;
}
inline bool S_ENTER_GAME::_internal_success() const {
  return _impl_.success_;
}
inline bool S_ENTER_GAME::success() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.success)
  return _internal_success();
}
inline void S_ENTER_GAME::_internal_set_success(bool value) {
  
  _impl_.success_ = value;
}
inline void S_ENTER_GAME::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.success)
}

// string membership_id_0 = 2;
inline void S_ENTER_GAME::clear_membership_id_0() {
  _impl_.membership_id_0_.ClearToEmpty();
}
inline const std::string& S_ENTER_GAME::membership_id_0() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.membership_id_0)
  return _internal_membership_id_0();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ENTER_GAME::set_membership_id_0(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_0_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.membership_id_0)
}
inline std::string* S_ENTER_GAME::mutable_membership_id_0() {
  std::string* _s = _internal_mutable_membership_id_0();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.membership_id_0)
  return _s;
}
inline const std::string& S_ENTER_GAME::_internal_membership_id_0() const {
  return _impl_.membership_id_0_.Get();
}
inline void S_ENTER_GAME::_internal_set_membership_id_0(const std::string& value) {
  
  _impl_.membership_id_0_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ENTER_GAME::_internal_mutable_membership_id_0() {
  
  return _impl_.membership_id_0_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ENTER_GAME::release_membership_id_0() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_GAME.membership_id_0)
  return _impl_.membership_id_0_.Release();
}
inline void S_ENTER_GAME::set_allocated_membership_id_0(std::string* membership_id_0) {
  if (membership_id_0 != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_0_.SetAllocated(membership_id_0, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_0_.IsDefault()) {
    _impl_.membership_id_0_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_GAME.membership_id_0)
}

// .Protocol.PlayerType membership_type_0 = 3;
inline void S_ENTER_GAME::clear_membership_type_0() {
  _impl_.membership_type_0_ = 0;
}
inline ::Protocol::PlayerType S_ENTER_GAME::_internal_membership_type_0() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.membership_type_0_);
}
inline ::Protocol::PlayerType S_ENTER_GAME::membership_type_0() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.membership_type_0)
  return _internal_membership_type_0();
}
inline void S_ENTER_GAME::_internal_set_membership_type_0(::Protocol::PlayerType value) {
  
  _impl_.membership_type_0_ = value;
}
inline void S_ENTER_GAME::set_membership_type_0(::Protocol::PlayerType value) {
  _internal_set_membership_type_0(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.membership_type_0)
}

// string membership_id_1 = 4;
inline void S_ENTER_GAME::clear_membership_id_1() {
  _impl_.membership_id_1_.ClearToEmpty();
}
inline const std::string& S_ENTER_GAME::membership_id_1() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.membership_id_1)
  return _internal_membership_id_1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ENTER_GAME::set_membership_id_1(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_1_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.membership_id_1)
}
inline std::string* S_ENTER_GAME::mutable_membership_id_1() {
  std::string* _s = _internal_mutable_membership_id_1();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.membership_id_1)
  return _s;
}
inline const std::string& S_ENTER_GAME::_internal_membership_id_1() const {
  return _impl_.membership_id_1_.Get();
}
inline void S_ENTER_GAME::_internal_set_membership_id_1(const std::string& value) {
  
  _impl_.membership_id_1_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ENTER_GAME::_internal_mutable_membership_id_1() {
  
  return _impl_.membership_id_1_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ENTER_GAME::release_membership_id_1() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_GAME.membership_id_1)
  return _impl_.membership_id_1_.Release();
}
inline void S_ENTER_GAME::set_allocated_membership_id_1(std::string* membership_id_1) {
  if (membership_id_1 != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_1_.SetAllocated(membership_id_1, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_1_.IsDefault()) {
    _impl_.membership_id_1_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_GAME.membership_id_1)
}

// .Protocol.PlayerType membership_type_1 = 5;
inline void S_ENTER_GAME::clear_membership_type_1() {
  _impl_.membership_type_1_ = 0;
}
inline ::Protocol::PlayerType S_ENTER_GAME::_internal_membership_type_1() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.membership_type_1_);
}
inline ::Protocol::PlayerType S_ENTER_GAME::membership_type_1() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.membership_type_1)
  return _internal_membership_type_1();
}
inline void S_ENTER_GAME::_internal_set_membership_type_1(::Protocol::PlayerType value) {
  
  _impl_.membership_type_1_ = value;
}
inline void S_ENTER_GAME::set_membership_type_1(::Protocol::PlayerType value) {
  _internal_set_membership_type_1(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.membership_type_1)
}

// string membership_id_2 = 6;
inline void S_ENTER_GAME::clear_membership_id_2() {
  _impl_.membership_id_2_.ClearToEmpty();
}
inline const std::string& S_ENTER_GAME::membership_id_2() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.membership_id_2)
  return _internal_membership_id_2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ENTER_GAME::set_membership_id_2(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_2_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.membership_id_2)
}
inline std::string* S_ENTER_GAME::mutable_membership_id_2() {
  std::string* _s = _internal_mutable_membership_id_2();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.membership_id_2)
  return _s;
}
inline const std::string& S_ENTER_GAME::_internal_membership_id_2() const {
  return _impl_.membership_id_2_.Get();
}
inline void S_ENTER_GAME::_internal_set_membership_id_2(const std::string& value) {
  
  _impl_.membership_id_2_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ENTER_GAME::_internal_mutable_membership_id_2() {
  
  return _impl_.membership_id_2_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ENTER_GAME::release_membership_id_2() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_GAME.membership_id_2)
  return _impl_.membership_id_2_.Release();
}
inline void S_ENTER_GAME::set_allocated_membership_id_2(std::string* membership_id_2) {
  if (membership_id_2 != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_2_.SetAllocated(membership_id_2, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_2_.IsDefault()) {
    _impl_.membership_id_2_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_GAME.membership_id_2)
}

// .Protocol.PlayerType membership_type_2 = 7;
inline void S_ENTER_GAME::clear_membership_type_2() {
  _impl_.membership_type_2_ = 0;
}
inline ::Protocol::PlayerType S_ENTER_GAME::_internal_membership_type_2() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.membership_type_2_);
}
inline ::Protocol::PlayerType S_ENTER_GAME::membership_type_2() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.membership_type_2)
  return _internal_membership_type_2();
}
inline void S_ENTER_GAME::_internal_set_membership_type_2(::Protocol::PlayerType value) {
  
  _impl_.membership_type_2_ = value;
}
inline void S_ENTER_GAME::set_membership_type_2(::Protocol::PlayerType value) {
  _internal_set_membership_type_2(value);
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.membership_type_2)
}

// string server_ip = 8;
inline void S_ENTER_GAME::clear_server_ip() {
  _impl_.server_ip_.ClearToEmpty();
}
inline const std::string& S_ENTER_GAME::server_ip() const {
  // @@protoc_insertion_point(field_get:Protocol.S_ENTER_GAME.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_ENTER_GAME::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 _impl_.server_ip_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_ENTER_GAME.server_ip)
}
inline std::string* S_ENTER_GAME::mutable_server_ip() {
  std::string* _s = _internal_mutable_server_ip();
  // @@protoc_insertion_point(field_mutable:Protocol.S_ENTER_GAME.server_ip)
  return _s;
}
inline const std::string& S_ENTER_GAME::_internal_server_ip() const {
  return _impl_.server_ip_.Get();
}
inline void S_ENTER_GAME::_internal_set_server_ip(const std::string& value) {
  
  _impl_.server_ip_.Set(value, GetArenaForAllocation());
}
inline std::string* S_ENTER_GAME::_internal_mutable_server_ip() {
  
  return _impl_.server_ip_.Mutable(GetArenaForAllocation());
}
inline std::string* S_ENTER_GAME::release_server_ip() {
  // @@protoc_insertion_point(field_release:Protocol.S_ENTER_GAME.server_ip)
  return _impl_.server_ip_.Release();
}
inline void S_ENTER_GAME::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  _impl_.server_ip_.SetAllocated(server_ip, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.server_ip_.IsDefault()) {
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_ENTER_GAME.server_ip)
}

// -------------------------------------------------------------------

// C_GAME_OVER

// -------------------------------------------------------------------

// C_LEAVE_GAME

// -------------------------------------------------------------------

// S_LEAVE_GAME

// string a = 1;
inline void S_LEAVE_GAME::clear_a() {
  _impl_.a_.ClearToEmpty();
}
inline const std::string& S_LEAVE_GAME::a() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LEAVE_GAME.a)
  return _internal_a();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_LEAVE_GAME::set_a(ArgT0&& arg0, ArgT... args) {
 
 _impl_.a_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_LEAVE_GAME.a)
}
inline std::string* S_LEAVE_GAME::mutable_a() {
  std::string* _s = _internal_mutable_a();
  // @@protoc_insertion_point(field_mutable:Protocol.S_LEAVE_GAME.a)
  return _s;
}
inline const std::string& S_LEAVE_GAME::_internal_a() const {
  return _impl_.a_.Get();
}
inline void S_LEAVE_GAME::_internal_set_a(const std::string& value) {
  
  _impl_.a_.Set(value, GetArenaForAllocation());
}
inline std::string* S_LEAVE_GAME::_internal_mutable_a() {
  
  return _impl_.a_.Mutable(GetArenaForAllocation());
}
inline std::string* S_LEAVE_GAME::release_a() {
  // @@protoc_insertion_point(field_release:Protocol.S_LEAVE_GAME.a)
  return _impl_.a_.Release();
}
inline void S_LEAVE_GAME::set_allocated_a(std::string* a) {
  if (a != nullptr) {
    
  } else {
    
  }
  _impl_.a_.SetAllocated(a, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.a_.IsDefault()) {
    _impl_.a_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_LEAVE_GAME.a)
}

// .Protocol.PlayerType b = 2;
inline void S_LEAVE_GAME::clear_b() {
  _impl_.b_ = 0;
}
inline ::Protocol::PlayerType S_LEAVE_GAME::_internal_b() const {
  return static_cast< ::Protocol::PlayerType >(_impl_.b_);
}
inline ::Protocol::PlayerType S_LEAVE_GAME::b() const {
  // @@protoc_insertion_point(field_get:Protocol.S_LEAVE_GAME.b)
  return _internal_b();
}
inline void S_LEAVE_GAME::_internal_set_b(::Protocol::PlayerType value) {
  
  _impl_.b_ = value;
}
inline void S_LEAVE_GAME::set_b(::Protocol::PlayerType value) {
  _internal_set_b(value);
  // @@protoc_insertion_point(field_set:Protocol.S_LEAVE_GAME.b)
}

// -------------------------------------------------------------------

// S_SPAWN

// repeated .Protocol.PlayerInfo players = 1;
inline int S_SPAWN::_internal_players_size() const {
  return _impl_.players_.size();
}
inline int S_SPAWN::players_size() const {
  return _internal_players_size();
}
inline ::Protocol::PlayerInfo* S_SPAWN::mutable_players(int index) {
  // @@protoc_insertion_point(field_mutable:Protocol.S_SPAWN.players)
  return _impl_.players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >*
S_SPAWN::mutable_players() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_SPAWN.players)
  return &_impl_.players_;
}
inline const ::Protocol::PlayerInfo& S_SPAWN::_internal_players(int index) const {
  return _impl_.players_.Get(index);
}
inline const ::Protocol::PlayerInfo& S_SPAWN::players(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_SPAWN.players)
  return _internal_players(index);
}
inline ::Protocol::PlayerInfo* S_SPAWN::_internal_add_players() {
  return _impl_.players_.Add();
}
inline ::Protocol::PlayerInfo* S_SPAWN::add_players() {
  ::Protocol::PlayerInfo* _add = _internal_add_players();
  // @@protoc_insertion_point(field_add:Protocol.S_SPAWN.players)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Protocol::PlayerInfo >&
S_SPAWN::players() const {
  // @@protoc_insertion_point(field_list:Protocol.S_SPAWN.players)
  return _impl_.players_;
}

// -------------------------------------------------------------------

// S_DESPAWN

// repeated uint64 object_ids = 1;
inline int S_DESPAWN::_internal_object_ids_size() const {
  return _impl_.object_ids_.size();
}
inline int S_DESPAWN::object_ids_size() const {
  return _internal_object_ids_size();
}
inline void S_DESPAWN::clear_object_ids() {
  _impl_.object_ids_.Clear();
}
inline uint64_t S_DESPAWN::_internal_object_ids(int index) const {
  return _impl_.object_ids_.Get(index);
}
inline uint64_t S_DESPAWN::object_ids(int index) const {
  // @@protoc_insertion_point(field_get:Protocol.S_DESPAWN.object_ids)
  return _internal_object_ids(index);
}
inline void S_DESPAWN::set_object_ids(int index, uint64_t value) {
  _impl_.object_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:Protocol.S_DESPAWN.object_ids)
}
inline void S_DESPAWN::_internal_add_object_ids(uint64_t value) {
  _impl_.object_ids_.Add(value);
}
inline void S_DESPAWN::add_object_ids(uint64_t value) {
  _internal_add_object_ids(value);
  // @@protoc_insertion_point(field_add:Protocol.S_DESPAWN.object_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
S_DESPAWN::_internal_object_ids() const {
  return _impl_.object_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
S_DESPAWN::object_ids() const {
  // @@protoc_insertion_point(field_list:Protocol.S_DESPAWN.object_ids)
  return _internal_object_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
S_DESPAWN::_internal_mutable_object_ids() {
  return &_impl_.object_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
S_DESPAWN::mutable_object_ids() {
  // @@protoc_insertion_point(field_mutable_list:Protocol.S_DESPAWN.object_ids)
  return _internal_mutable_object_ids();
}

// -------------------------------------------------------------------

// C_CHAT

// string msg = 1;
inline void C_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& C_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_CHAT.msg)
}
inline std::string* C_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_CHAT.msg)
  return _s;
}
inline const std::string& C_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void C_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* C_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* C_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void C_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_CHAT.msg)
}

// -------------------------------------------------------------------

// S_CHAT

// uint64 playerId = 1;
inline void S_CHAT::clear_playerid() {
  _impl_.playerid_ = uint64_t{0u};
}
inline uint64_t S_CHAT::_internal_playerid() const {
  return _impl_.playerid_;
}
inline uint64_t S_CHAT::playerid() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.playerId)
  return _internal_playerid();
}
inline void S_CHAT::_internal_set_playerid(uint64_t value) {
  
  _impl_.playerid_ = value;
}
inline void S_CHAT::set_playerid(uint64_t value) {
  _internal_set_playerid(value);
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.playerId)
}

// string msg = 2;
inline void S_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_CHAT.msg)
}
inline std::string* S_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_CHAT.msg)
  return _s;
}
inline const std::string& S_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void S_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void S_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_CHAT.msg)
}

// -------------------------------------------------------------------

// C_PUBLIC_CHAT

// string membership_id = 1;
inline void C_PUBLIC_CHAT::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& C_PUBLIC_CHAT::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PUBLIC_CHAT.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_PUBLIC_CHAT::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_PUBLIC_CHAT.membership_id)
}
inline std::string* C_PUBLIC_CHAT::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PUBLIC_CHAT.membership_id)
  return _s;
}
inline const std::string& C_PUBLIC_CHAT::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void C_PUBLIC_CHAT::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_PUBLIC_CHAT::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_PUBLIC_CHAT::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_PUBLIC_CHAT.membership_id)
  return _impl_.membership_id_.Release();
}
inline void C_PUBLIC_CHAT::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PUBLIC_CHAT.membership_id)
}

// string msg = 2;
inline void C_PUBLIC_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& C_PUBLIC_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PUBLIC_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_PUBLIC_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_PUBLIC_CHAT.msg)
}
inline std::string* C_PUBLIC_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PUBLIC_CHAT.msg)
  return _s;
}
inline const std::string& C_PUBLIC_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void C_PUBLIC_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* C_PUBLIC_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* C_PUBLIC_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_PUBLIC_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void C_PUBLIC_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PUBLIC_CHAT.msg)
}

// string msg_num = 3;
inline void C_PUBLIC_CHAT::clear_msg_num() {
  _impl_.msg_num_.ClearToEmpty();
}
inline const std::string& C_PUBLIC_CHAT::msg_num() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PUBLIC_CHAT.msg_num)
  return _internal_msg_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_PUBLIC_CHAT::set_msg_num(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_num_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_PUBLIC_CHAT.msg_num)
}
inline std::string* C_PUBLIC_CHAT::mutable_msg_num() {
  std::string* _s = _internal_mutable_msg_num();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PUBLIC_CHAT.msg_num)
  return _s;
}
inline const std::string& C_PUBLIC_CHAT::_internal_msg_num() const {
  return _impl_.msg_num_.Get();
}
inline void C_PUBLIC_CHAT::_internal_set_msg_num(const std::string& value) {
  
  _impl_.msg_num_.Set(value, GetArenaForAllocation());
}
inline std::string* C_PUBLIC_CHAT::_internal_mutable_msg_num() {
  
  return _impl_.msg_num_.Mutable(GetArenaForAllocation());
}
inline std::string* C_PUBLIC_CHAT::release_msg_num() {
  // @@protoc_insertion_point(field_release:Protocol.C_PUBLIC_CHAT.msg_num)
  return _impl_.msg_num_.Release();
}
inline void C_PUBLIC_CHAT::set_allocated_msg_num(std::string* msg_num) {
  if (msg_num != nullptr) {
    
  } else {
    
  }
  _impl_.msg_num_.SetAllocated(msg_num, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_num_.IsDefault()) {
    _impl_.msg_num_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PUBLIC_CHAT.msg_num)
}

// -------------------------------------------------------------------

// S_PUBLIC_CHAT

// string membership_id = 1;
inline void S_PUBLIC_CHAT::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& S_PUBLIC_CHAT::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PUBLIC_CHAT.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_PUBLIC_CHAT::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_PUBLIC_CHAT.membership_id)
}
inline std::string* S_PUBLIC_CHAT::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PUBLIC_CHAT.membership_id)
  return _s;
}
inline const std::string& S_PUBLIC_CHAT::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void S_PUBLIC_CHAT::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S_PUBLIC_CHAT::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S_PUBLIC_CHAT::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_PUBLIC_CHAT.membership_id)
  return _impl_.membership_id_.Release();
}
inline void S_PUBLIC_CHAT::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PUBLIC_CHAT.membership_id)
}

// string msg = 2;
inline void S_PUBLIC_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_PUBLIC_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PUBLIC_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_PUBLIC_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_PUBLIC_CHAT.msg)
}
inline std::string* S_PUBLIC_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PUBLIC_CHAT.msg)
  return _s;
}
inline const std::string& S_PUBLIC_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void S_PUBLIC_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_PUBLIC_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_PUBLIC_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_PUBLIC_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void S_PUBLIC_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PUBLIC_CHAT.msg)
}

// string msg_num = 3;
inline void S_PUBLIC_CHAT::clear_msg_num() {
  _impl_.msg_num_.ClearToEmpty();
}
inline const std::string& S_PUBLIC_CHAT::msg_num() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PUBLIC_CHAT.msg_num)
  return _internal_msg_num();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_PUBLIC_CHAT::set_msg_num(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_num_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_PUBLIC_CHAT.msg_num)
}
inline std::string* S_PUBLIC_CHAT::mutable_msg_num() {
  std::string* _s = _internal_mutable_msg_num();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PUBLIC_CHAT.msg_num)
  return _s;
}
inline const std::string& S_PUBLIC_CHAT::_internal_msg_num() const {
  return _impl_.msg_num_.Get();
}
inline void S_PUBLIC_CHAT::_internal_set_msg_num(const std::string& value) {
  
  _impl_.msg_num_.Set(value, GetArenaForAllocation());
}
inline std::string* S_PUBLIC_CHAT::_internal_mutable_msg_num() {
  
  return _impl_.msg_num_.Mutable(GetArenaForAllocation());
}
inline std::string* S_PUBLIC_CHAT::release_msg_num() {
  // @@protoc_insertion_point(field_release:Protocol.S_PUBLIC_CHAT.msg_num)
  return _impl_.msg_num_.Release();
}
inline void S_PUBLIC_CHAT::set_allocated_msg_num(std::string* msg_num) {
  if (msg_num != nullptr) {
    
  } else {
    
  }
  _impl_.msg_num_.SetAllocated(msg_num, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_num_.IsDefault()) {
    _impl_.msg_num_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PUBLIC_CHAT.msg_num)
}

// -------------------------------------------------------------------

// C_PRIVATE_CHAT

// string membership_id = 1;
inline void C_PRIVATE_CHAT::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& C_PRIVATE_CHAT::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PRIVATE_CHAT.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_PRIVATE_CHAT::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_PRIVATE_CHAT.membership_id)
}
inline std::string* C_PRIVATE_CHAT::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PRIVATE_CHAT.membership_id)
  return _s;
}
inline const std::string& C_PRIVATE_CHAT::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void C_PRIVATE_CHAT::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* C_PRIVATE_CHAT::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* C_PRIVATE_CHAT::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.C_PRIVATE_CHAT.membership_id)
  return _impl_.membership_id_.Release();
}
inline void C_PRIVATE_CHAT::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PRIVATE_CHAT.membership_id)
}

// string msg = 2;
inline void C_PRIVATE_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& C_PRIVATE_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PRIVATE_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void C_PRIVATE_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.C_PRIVATE_CHAT.msg)
}
inline std::string* C_PRIVATE_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.C_PRIVATE_CHAT.msg)
  return _s;
}
inline const std::string& C_PRIVATE_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void C_PRIVATE_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* C_PRIVATE_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* C_PRIVATE_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.C_PRIVATE_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void C_PRIVATE_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.C_PRIVATE_CHAT.msg)
}

// .Protocol.SchoolType membership_type = 3;
inline void C_PRIVATE_CHAT::clear_membership_type() {
  _impl_.membership_type_ = 0;
}
inline ::Protocol::SchoolType C_PRIVATE_CHAT::_internal_membership_type() const {
  return static_cast< ::Protocol::SchoolType >(_impl_.membership_type_);
}
inline ::Protocol::SchoolType C_PRIVATE_CHAT::membership_type() const {
  // @@protoc_insertion_point(field_get:Protocol.C_PRIVATE_CHAT.membership_type)
  return _internal_membership_type();
}
inline void C_PRIVATE_CHAT::_internal_set_membership_type(::Protocol::SchoolType value) {
  
  _impl_.membership_type_ = value;
}
inline void C_PRIVATE_CHAT::set_membership_type(::Protocol::SchoolType value) {
  _internal_set_membership_type(value);
  // @@protoc_insertion_point(field_set:Protocol.C_PRIVATE_CHAT.membership_type)
}

// -------------------------------------------------------------------

// S_PRIVATE_CHAT

// string membership_id = 1;
inline void S_PRIVATE_CHAT::clear_membership_id() {
  _impl_.membership_id_.ClearToEmpty();
}
inline const std::string& S_PRIVATE_CHAT::membership_id() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PRIVATE_CHAT.membership_id)
  return _internal_membership_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_PRIVATE_CHAT::set_membership_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.membership_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_PRIVATE_CHAT.membership_id)
}
inline std::string* S_PRIVATE_CHAT::mutable_membership_id() {
  std::string* _s = _internal_mutable_membership_id();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PRIVATE_CHAT.membership_id)
  return _s;
}
inline const std::string& S_PRIVATE_CHAT::_internal_membership_id() const {
  return _impl_.membership_id_.Get();
}
inline void S_PRIVATE_CHAT::_internal_set_membership_id(const std::string& value) {
  
  _impl_.membership_id_.Set(value, GetArenaForAllocation());
}
inline std::string* S_PRIVATE_CHAT::_internal_mutable_membership_id() {
  
  return _impl_.membership_id_.Mutable(GetArenaForAllocation());
}
inline std::string* S_PRIVATE_CHAT::release_membership_id() {
  // @@protoc_insertion_point(field_release:Protocol.S_PRIVATE_CHAT.membership_id)
  return _impl_.membership_id_.Release();
}
inline void S_PRIVATE_CHAT::set_allocated_membership_id(std::string* membership_id) {
  if (membership_id != nullptr) {
    
  } else {
    
  }
  _impl_.membership_id_.SetAllocated(membership_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.membership_id_.IsDefault()) {
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PRIVATE_CHAT.membership_id)
}

// string msg = 2;
inline void S_PRIVATE_CHAT::clear_msg() {
  _impl_.msg_.ClearToEmpty();
}
inline const std::string& S_PRIVATE_CHAT::msg() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PRIVATE_CHAT.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void S_PRIVATE_CHAT::set_msg(ArgT0&& arg0, ArgT... args) {
 
 _impl_.msg_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Protocol.S_PRIVATE_CHAT.msg)
}
inline std::string* S_PRIVATE_CHAT::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:Protocol.S_PRIVATE_CHAT.msg)
  return _s;
}
inline const std::string& S_PRIVATE_CHAT::_internal_msg() const {
  return _impl_.msg_.Get();
}
inline void S_PRIVATE_CHAT::_internal_set_msg(const std::string& value) {
  
  _impl_.msg_.Set(value, GetArenaForAllocation());
}
inline std::string* S_PRIVATE_CHAT::_internal_mutable_msg() {
  
  return _impl_.msg_.Mutable(GetArenaForAllocation());
}
inline std::string* S_PRIVATE_CHAT::release_msg() {
  // @@protoc_insertion_point(field_release:Protocol.S_PRIVATE_CHAT.msg)
  return _impl_.msg_.Release();
}
inline void S_PRIVATE_CHAT::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  _impl_.msg_.SetAllocated(msg, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.msg_.IsDefault()) {
    _impl_.msg_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:Protocol.S_PRIVATE_CHAT.msg)
}

// .Protocol.SchoolType membership_type = 3;
inline void S_PRIVATE_CHAT::clear_membership_type() {
  _impl_.membership_type_ = 0;
}
inline ::Protocol::SchoolType S_PRIVATE_CHAT::_internal_membership_type() const {
  return static_cast< ::Protocol::SchoolType >(_impl_.membership_type_);
}
inline ::Protocol::SchoolType S_PRIVATE_CHAT::membership_type() const {
  // @@protoc_insertion_point(field_get:Protocol.S_PRIVATE_CHAT.membership_type)
  return _internal_membership_type();
}
inline void S_PRIVATE_CHAT::_internal_set_membership_type(::Protocol::SchoolType value) {
  
  _impl_.membership_type_ = value;
}
inline void S_PRIVATE_CHAT::set_membership_type(::Protocol::SchoolType value) {
  _internal_set_membership_type(value);
  // @@protoc_insertion_point(field_set:Protocol.S_PRIVATE_CHAT.membership_type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Protocol

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Protocol_2eproto
