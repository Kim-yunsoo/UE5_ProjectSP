// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto

#include "Protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace Protocol {
PROTOBUF_CONSTEXPR C_LOGIN::C_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LOGINDefaultTypeInternal() {}
  union {
    C_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LOGINDefaultTypeInternal _C_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR S_LOGIN::S_LOGIN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.membership_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LOGINDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LOGINDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LOGINDefaultTypeInternal() {}
  union {
    S_LOGIN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LOGINDefaultTypeInternal _S_LOGIN_default_instance_;
PROTOBUF_CONSTEXPR C_MEMBERSHIP::C_MEMBERSHIP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.membership_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_MEMBERSHIPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_MEMBERSHIPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_MEMBERSHIPDefaultTypeInternal() {}
  union {
    C_MEMBERSHIP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_MEMBERSHIPDefaultTypeInternal _C_MEMBERSHIP_default_instance_;
PROTOBUF_CONSTEXPR S_MEMBERSHIP::S_MEMBERSHIP(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.membership_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_MEMBERSHIPDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_MEMBERSHIPDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_MEMBERSHIPDefaultTypeInternal() {}
  union {
    S_MEMBERSHIP _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_MEMBERSHIPDefaultTypeInternal _S_MEMBERSHIP_default_instance_;
PROTOBUF_CONSTEXPR C_CREATE_ROOM::C_CREATE_ROOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.ip_address_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.membership_type_)*/0
  , /*decltype(_impl_.school_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CREATE_ROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CREATE_ROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CREATE_ROOMDefaultTypeInternal() {}
  union {
    C_CREATE_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CREATE_ROOMDefaultTypeInternal _C_CREATE_ROOM_default_instance_;
PROTOBUF_CONSTEXPR C_ENTER_ROOM::C_ENTER_ROOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.membership_type_)*/0
  , /*decltype(_impl_.school_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_ENTER_ROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_ENTER_ROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_ENTER_ROOMDefaultTypeInternal() {}
  union {
    C_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_ENTER_ROOMDefaultTypeInternal _C_ENTER_ROOM_default_instance_;
PROTOBUF_CONSTEXPR S_ENTER_ROOM::S_ENTER_ROOM(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTER_ROOMDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTER_ROOMDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTER_ROOMDefaultTypeInternal() {}
  union {
    S_ENTER_ROOM _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTER_ROOMDefaultTypeInternal _S_ENTER_ROOM_default_instance_;
PROTOBUF_CONSTEXPR S_ENTER_GAME::S_ENTER_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_0_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.membership_id_1_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.membership_id_2_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.server_ip_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.success_)*/false
  , /*decltype(_impl_.membership_type_0_)*/0
  , /*decltype(_impl_.membership_type_1_)*/0
  , /*decltype(_impl_.membership_type_2_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_ENTER_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_ENTER_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_ENTER_GAMEDefaultTypeInternal() {}
  union {
    S_ENTER_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_ENTER_GAMEDefaultTypeInternal _S_ENTER_GAME_default_instance_;
PROTOBUF_CONSTEXPR C_LEAVE_GAME::C_LEAVE_GAME(
    ::_pbi::ConstantInitialized) {}
struct C_LEAVE_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_LEAVE_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_LEAVE_GAMEDefaultTypeInternal() {}
  union {
    C_LEAVE_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_LEAVE_GAMEDefaultTypeInternal _C_LEAVE_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_LEAVE_GAME::S_LEAVE_GAME(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.a_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.b_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_LEAVE_GAMEDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_LEAVE_GAMEDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_LEAVE_GAMEDefaultTypeInternal() {}
  union {
    S_LEAVE_GAME _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_LEAVE_GAMEDefaultTypeInternal _S_LEAVE_GAME_default_instance_;
PROTOBUF_CONSTEXPR S_SPAWN::S_SPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.players_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_SPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_SPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_SPAWNDefaultTypeInternal() {}
  union {
    S_SPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_SPAWNDefaultTypeInternal _S_SPAWN_default_instance_;
PROTOBUF_CONSTEXPR S_DESPAWN::S_DESPAWN(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.object_ids_)*/{}
  , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_DESPAWNDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_DESPAWNDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_DESPAWNDefaultTypeInternal() {}
  union {
    S_DESPAWN _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_DESPAWNDefaultTypeInternal _S_DESPAWN_default_instance_;
PROTOBUF_CONSTEXPR C_CHAT::C_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_CHATDefaultTypeInternal() {}
  union {
    C_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_CHATDefaultTypeInternal _C_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_CHAT::S_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.playerid_)*/uint64_t{0u}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_CHATDefaultTypeInternal() {}
  union {
    S_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_CHATDefaultTypeInternal _S_CHAT_default_instance_;
PROTOBUF_CONSTEXPR C_PUBLIC_CHAT::C_PUBLIC_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_num_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PUBLIC_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PUBLIC_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PUBLIC_CHATDefaultTypeInternal() {}
  union {
    C_PUBLIC_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PUBLIC_CHATDefaultTypeInternal _C_PUBLIC_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_PUBLIC_CHAT::S_PUBLIC_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_num_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PUBLIC_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PUBLIC_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PUBLIC_CHATDefaultTypeInternal() {}
  union {
    S_PUBLIC_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PUBLIC_CHATDefaultTypeInternal _S_PUBLIC_CHAT_default_instance_;
PROTOBUF_CONSTEXPR C_PRIVATE_CHAT::C_PRIVATE_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.membership_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct C_PRIVATE_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR C_PRIVATE_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~C_PRIVATE_CHATDefaultTypeInternal() {}
  union {
    C_PRIVATE_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 C_PRIVATE_CHATDefaultTypeInternal _C_PRIVATE_CHAT_default_instance_;
PROTOBUF_CONSTEXPR S_PRIVATE_CHAT::S_PRIVATE_CHAT(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.membership_id_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.msg_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.membership_type_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct S_PRIVATE_CHATDefaultTypeInternal {
  PROTOBUF_CONSTEXPR S_PRIVATE_CHATDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~S_PRIVATE_CHATDefaultTypeInternal() {}
  union {
    S_PRIVATE_CHAT _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 S_PRIVATE_CHATDefaultTypeInternal _S_PRIVATE_CHAT_default_instance_;
}  // namespace Protocol
static ::_pb::Metadata file_level_metadata_Protocol_2eproto[18];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_Protocol_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Protocol_2eproto = nullptr;

const uint32_t TableStruct_Protocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LOGIN, _impl_.membership_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.membership_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LOGIN, _impl_.membership_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MEMBERSHIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MEMBERSHIP, _impl_.membership_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_MEMBERSHIP, _impl_.membership_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MEMBERSHIP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MEMBERSHIP, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MEMBERSHIP, _impl_.membership_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_MEMBERSHIP, _impl_.membership_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM, _impl_.ip_address_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM, _impl_.membership_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM, _impl_.membership_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CREATE_ROOM, _impl_.school_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ROOM, _impl_.membership_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ROOM, _impl_.membership_type_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_ENTER_ROOM, _impl_.school_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_ROOM, _impl_.success_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.success_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.membership_id_0_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.membership_type_0_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.membership_id_1_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.membership_type_1_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.membership_id_2_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.membership_type_2_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_ENTER_GAME, _impl_.server_ip_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_GAME, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_GAME, _impl_.a_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_LEAVE_GAME, _impl_.b_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_SPAWN, _impl_.players_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_DESPAWN, _impl_.object_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_CHAT, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.playerid_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_CHAT, _impl_.msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PUBLIC_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PUBLIC_CHAT, _impl_.membership_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PUBLIC_CHAT, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PUBLIC_CHAT, _impl_.msg_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PUBLIC_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PUBLIC_CHAT, _impl_.membership_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PUBLIC_CHAT, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PUBLIC_CHAT, _impl_.msg_num_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PRIVATE_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PRIVATE_CHAT, _impl_.membership_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PRIVATE_CHAT, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::Protocol::C_PRIVATE_CHAT, _impl_.membership_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PRIVATE_CHAT, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PRIVATE_CHAT, _impl_.membership_id_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PRIVATE_CHAT, _impl_.msg_),
  PROTOBUF_FIELD_OFFSET(::Protocol::S_PRIVATE_CHAT, _impl_.membership_type_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Protocol::C_LOGIN)},
  { 7, -1, -1, sizeof(::Protocol::S_LOGIN)},
  { 16, -1, -1, sizeof(::Protocol::C_MEMBERSHIP)},
  { 24, -1, -1, sizeof(::Protocol::S_MEMBERSHIP)},
  { 33, -1, -1, sizeof(::Protocol::C_CREATE_ROOM)},
  { 43, -1, -1, sizeof(::Protocol::C_ENTER_ROOM)},
  { 52, -1, -1, sizeof(::Protocol::S_ENTER_ROOM)},
  { 59, -1, -1, sizeof(::Protocol::S_ENTER_GAME)},
  { 73, -1, -1, sizeof(::Protocol::C_LEAVE_GAME)},
  { 79, -1, -1, sizeof(::Protocol::S_LEAVE_GAME)},
  { 87, -1, -1, sizeof(::Protocol::S_SPAWN)},
  { 94, -1, -1, sizeof(::Protocol::S_DESPAWN)},
  { 101, -1, -1, sizeof(::Protocol::C_CHAT)},
  { 108, -1, -1, sizeof(::Protocol::S_CHAT)},
  { 116, -1, -1, sizeof(::Protocol::C_PUBLIC_CHAT)},
  { 125, -1, -1, sizeof(::Protocol::S_PUBLIC_CHAT)},
  { 134, -1, -1, sizeof(::Protocol::C_PRIVATE_CHAT)},
  { 143, -1, -1, sizeof(::Protocol::S_PRIVATE_CHAT)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::Protocol::_C_LOGIN_default_instance_._instance,
  &::Protocol::_S_LOGIN_default_instance_._instance,
  &::Protocol::_C_MEMBERSHIP_default_instance_._instance,
  &::Protocol::_S_MEMBERSHIP_default_instance_._instance,
  &::Protocol::_C_CREATE_ROOM_default_instance_._instance,
  &::Protocol::_C_ENTER_ROOM_default_instance_._instance,
  &::Protocol::_S_ENTER_ROOM_default_instance_._instance,
  &::Protocol::_S_ENTER_GAME_default_instance_._instance,
  &::Protocol::_C_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_S_LEAVE_GAME_default_instance_._instance,
  &::Protocol::_S_SPAWN_default_instance_._instance,
  &::Protocol::_S_DESPAWN_default_instance_._instance,
  &::Protocol::_C_CHAT_default_instance_._instance,
  &::Protocol::_S_CHAT_default_instance_._instance,
  &::Protocol::_C_PUBLIC_CHAT_default_instance_._instance,
  &::Protocol::_S_PUBLIC_CHAT_default_instance_._instance,
  &::Protocol::_C_PRIVATE_CHAT_default_instance_._instance,
  &::Protocol::_S_PRIVATE_CHAT_default_instance_._instance,
};

const char descriptor_table_protodef_Protocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016Protocol.proto\022\010Protocol\032\nEnum.proto\032\014"
  "Struct.proto\" \n\007C_LOGIN\022\025\n\rmembership_id"
  "\030\001 \001(\t\"`\n\007S_LOGIN\022\017\n\007success\030\001 \001(\010\022\025\n\rme"
  "mbership_id\030\002 \001(\t\022-\n\017membership_type\030\003 \001"
  "(\0162\024.Protocol.PlayerType\"T\n\014C_MEMBERSHIP"
  "\022\025\n\rmembership_id\030\001 \001(\t\022-\n\017membership_ty"
  "pe\030\002 \001(\0162\024.Protocol.PlayerType\"e\n\014S_MEMB"
  "ERSHIP\022\017\n\007success\030\001 \001(\010\022\025\n\rmembership_id"
  "\030\002 \001(\t\022-\n\017membership_type\030\003 \001(\0162\024.Protoc"
  "ol.PlayerType\"\224\001\n\rC_CREATE_ROOM\022\022\n\nip_ad"
  "dress\030\001 \001(\t\022\025\n\rmembership_id\030\002 \001(\t\022-\n\017me"
  "mbership_type\030\003 \001(\0162\024.Protocol.PlayerTyp"
  "e\022)\n\013school_type\030\004 \001(\0162\024.Protocol.School"
  "Type\"\177\n\014C_ENTER_ROOM\022\025\n\rmembership_id\030\001 "
  "\001(\t\022-\n\017membership_type\030\002 \001(\0162\024.Protocol."
  "PlayerType\022)\n\013school_type\030\003 \001(\0162\024.Protoc"
  "ol.SchoolType\"\037\n\014S_ENTER_ROOM\022\017\n\007success"
  "\030\001 \001(\010\"\220\002\n\014S_ENTER_GAME\022\017\n\007success\030\001 \001(\010"
  "\022\027\n\017membership_id_0\030\002 \001(\t\022/\n\021membership_"
  "type_0\030\003 \001(\0162\024.Protocol.PlayerType\022\027\n\017me"
  "mbership_id_1\030\004 \001(\t\022/\n\021membership_type_1"
  "\030\005 \001(\0162\024.Protocol.PlayerType\022\027\n\017membersh"
  "ip_id_2\030\006 \001(\t\022/\n\021membership_type_2\030\007 \001(\016"
  "2\024.Protocol.PlayerType\022\021\n\tserver_ip\030\010 \001("
  "\t\"\016\n\014C_LEAVE_GAME\":\n\014S_LEAVE_GAME\022\t\n\001a\030\001"
  " \001(\t\022\037\n\001b\030\002 \001(\0162\024.Protocol.PlayerType\"0\n"
  "\007S_SPAWN\022%\n\007players\030\001 \003(\0132\024.Protocol.Pla"
  "yerInfo\"\037\n\tS_DESPAWN\022\022\n\nobject_ids\030\001 \003(\004"
  "\"\025\n\006C_CHAT\022\013\n\003msg\030\001 \001(\t\"\'\n\006S_CHAT\022\020\n\010pla"
  "yerId\030\001 \001(\004\022\013\n\003msg\030\002 \001(\t\"D\n\rC_PUBLIC_CHA"
  "T\022\025\n\rmembership_id\030\001 \001(\t\022\013\n\003msg\030\002 \001(\t\022\017\n"
  "\007msg_num\030\003 \001(\t\"D\n\rS_PUBLIC_CHAT\022\025\n\rmembe"
  "rship_id\030\001 \001(\t\022\013\n\003msg\030\002 \001(\t\022\017\n\007msg_num\030\003"
  " \001(\t\"c\n\016C_PRIVATE_CHAT\022\025\n\rmembership_id\030"
  "\001 \001(\t\022\013\n\003msg\030\002 \001(\t\022-\n\017membership_type\030\003 "
  "\001(\0162\024.Protocol.SchoolType\"c\n\016S_PRIVATE_C"
  "HAT\022\025\n\rmembership_id\030\001 \001(\t\022\013\n\003msg\030\002 \001(\t\022"
  "-\n\017membership_type\030\003 \001(\0162\024.Protocol.Scho"
  "olTypeb\006proto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Protocol_2eproto_deps[2] = {
  &::descriptor_table_Enum_2eproto,
  &::descriptor_table_Struct_2eproto,
};
static ::_pbi::once_flag descriptor_table_Protocol_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Protocol_2eproto = {
    false, false, 1534, descriptor_table_protodef_Protocol_2eproto,
    "Protocol.proto",
    &descriptor_table_Protocol_2eproto_once, descriptor_table_Protocol_2eproto_deps, 2, 18,
    schemas, file_default_instances, TableStruct_Protocol_2eproto::offsets,
    file_level_metadata_Protocol_2eproto, file_level_enum_descriptors_Protocol_2eproto,
    file_level_service_descriptors_Protocol_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Protocol_2eproto_getter() {
  return &descriptor_table_Protocol_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Protocol_2eproto(&descriptor_table_Protocol_2eproto);
namespace Protocol {

// ===================================================================

class C_LOGIN::_Internal {
 public:
};

C_LOGIN::C_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LOGIN)
}
C_LOGIN::C_LOGIN(const C_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LOGIN)
}

inline void C_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_LOGIN::~C_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.C_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_.Destroy();
}

void C_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string membership_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_LOGIN.membership_id"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_LOGIN.membership_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_membership_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_LOGIN)
  return target;
}

size_t C_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LOGIN::GetClassData() const { return &_class_data_; }


void C_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_LOGIN*>(&to_msg);
  auto& from = static_cast<const C_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_LOGIN::CopyFrom(const C_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_LOGIN::IsInitialized() const {
  return true;
}

void C_LOGIN::InternalSwap(C_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[0]);
}

// ===================================================================

class S_LOGIN::_Internal {
 public:
};

S_LOGIN::S_LOGIN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LOGIN)
}
S_LOGIN::S_LOGIN(const S_LOGIN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LOGIN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.membership_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.membership_type_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.membership_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LOGIN)
}

inline void S_LOGIN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.membership_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_LOGIN::~S_LOGIN() {
  // @@protoc_insertion_point(destructor:Protocol.S_LOGIN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LOGIN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_.Destroy();
}

void S_LOGIN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LOGIN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.membership_type_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.membership_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LOGIN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string membership_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_LOGIN.membership_id"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType membership_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LOGIN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LOGIN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string membership_id = 2;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_LOGIN.membership_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_membership_id(), target);
  }

  // .Protocol.PlayerType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_membership_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LOGIN)
  return target;
}

size_t S_LOGIN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LOGIN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 2;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.PlayerType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LOGIN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LOGIN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LOGIN::GetClassData() const { return &_class_data_; }


void S_LOGIN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LOGIN*>(&to_msg);
  auto& from = static_cast<const S_LOGIN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LOGIN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_membership_type() != 0) {
    _this->_internal_set_membership_type(from._internal_membership_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LOGIN::CopyFrom(const S_LOGIN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LOGIN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LOGIN::IsInitialized() const {
  return true;
}

void S_LOGIN::InternalSwap(S_LOGIN* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_LOGIN, _impl_.membership_type_)
      + sizeof(S_LOGIN::_impl_.membership_type_)
      - PROTOBUF_FIELD_OFFSET(S_LOGIN, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LOGIN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[1]);
}

// ===================================================================

class C_MEMBERSHIP::_Internal {
 public:
};

C_MEMBERSHIP::C_MEMBERSHIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_MEMBERSHIP)
}
C_MEMBERSHIP::C_MEMBERSHIP(const C_MEMBERSHIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_MEMBERSHIP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.membership_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.membership_type_ = from._impl_.membership_type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_MEMBERSHIP)
}

inline void C_MEMBERSHIP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.membership_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_MEMBERSHIP::~C_MEMBERSHIP() {
  // @@protoc_insertion_point(destructor:Protocol.C_MEMBERSHIP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_MEMBERSHIP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_.Destroy();
}

void C_MEMBERSHIP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_MEMBERSHIP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_MEMBERSHIP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_.ClearToEmpty();
  _impl_.membership_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_MEMBERSHIP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string membership_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_MEMBERSHIP.membership_id"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType membership_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_MEMBERSHIP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_MEMBERSHIP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_MEMBERSHIP.membership_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_membership_id(), target);
  }

  // .Protocol.PlayerType membership_type = 2;
  if (this->_internal_membership_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_membership_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_MEMBERSHIP)
  return target;
}

size_t C_MEMBERSHIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_MEMBERSHIP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // .Protocol.PlayerType membership_type = 2;
  if (this->_internal_membership_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_MEMBERSHIP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_MEMBERSHIP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_MEMBERSHIP::GetClassData() const { return &_class_data_; }


void C_MEMBERSHIP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_MEMBERSHIP*>(&to_msg);
  auto& from = static_cast<const C_MEMBERSHIP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_MEMBERSHIP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  if (from._internal_membership_type() != 0) {
    _this->_internal_set_membership_type(from._internal_membership_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_MEMBERSHIP::CopyFrom(const C_MEMBERSHIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_MEMBERSHIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_MEMBERSHIP::IsInitialized() const {
  return true;
}

void C_MEMBERSHIP::InternalSwap(C_MEMBERSHIP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
  swap(_impl_.membership_type_, other->_impl_.membership_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_MEMBERSHIP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[2]);
}

// ===================================================================

class S_MEMBERSHIP::_Internal {
 public:
};

S_MEMBERSHIP::S_MEMBERSHIP(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_MEMBERSHIP)
}
S_MEMBERSHIP::S_MEMBERSHIP(const S_MEMBERSHIP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_MEMBERSHIP* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.membership_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.membership_type_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.membership_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_MEMBERSHIP)
}

inline void S_MEMBERSHIP::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.membership_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_MEMBERSHIP::~S_MEMBERSHIP() {
  // @@protoc_insertion_point(destructor:Protocol.S_MEMBERSHIP)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_MEMBERSHIP::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_.Destroy();
}

void S_MEMBERSHIP::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_MEMBERSHIP::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_MEMBERSHIP)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.membership_type_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.membership_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_MEMBERSHIP::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string membership_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_MEMBERSHIP.membership_id"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType membership_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_MEMBERSHIP::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_MEMBERSHIP)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string membership_id = 2;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_MEMBERSHIP.membership_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_membership_id(), target);
  }

  // .Protocol.PlayerType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_membership_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_MEMBERSHIP)
  return target;
}

size_t S_MEMBERSHIP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_MEMBERSHIP)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 2;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.PlayerType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_MEMBERSHIP::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_MEMBERSHIP::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_MEMBERSHIP::GetClassData() const { return &_class_data_; }


void S_MEMBERSHIP::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_MEMBERSHIP*>(&to_msg);
  auto& from = static_cast<const S_MEMBERSHIP&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_MEMBERSHIP)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_membership_type() != 0) {
    _this->_internal_set_membership_type(from._internal_membership_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_MEMBERSHIP::CopyFrom(const S_MEMBERSHIP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_MEMBERSHIP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_MEMBERSHIP::IsInitialized() const {
  return true;
}

void S_MEMBERSHIP::InternalSwap(S_MEMBERSHIP* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_MEMBERSHIP, _impl_.membership_type_)
      + sizeof(S_MEMBERSHIP::_impl_.membership_type_)
      - PROTOBUF_FIELD_OFFSET(S_MEMBERSHIP, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_MEMBERSHIP::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[3]);
}

// ===================================================================

class C_CREATE_ROOM::_Internal {
 public:
};

C_CREATE_ROOM::C_CREATE_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CREATE_ROOM)
}
C_CREATE_ROOM::C_CREATE_ROOM(const C_CREATE_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CREATE_ROOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_address_){}
    , decltype(_impl_.membership_id_){}
    , decltype(_impl_.membership_type_){}
    , decltype(_impl_.school_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip_address().empty()) {
    _this->_impl_.ip_address_.Set(from._internal_ip_address(), 
      _this->GetArenaForAllocation());
  }
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.membership_type_, &from._impl_.membership_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.school_type_) -
    reinterpret_cast<char*>(&_impl_.membership_type_)) + sizeof(_impl_.school_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CREATE_ROOM)
}

inline void C_CREATE_ROOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.ip_address_){}
    , decltype(_impl_.membership_id_){}
    , decltype(_impl_.membership_type_){0}
    , decltype(_impl_.school_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.ip_address_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.ip_address_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CREATE_ROOM::~C_CREATE_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_CREATE_ROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CREATE_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.ip_address_.Destroy();
  _impl_.membership_id_.Destroy();
}

void C_CREATE_ROOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CREATE_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CREATE_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.ip_address_.ClearToEmpty();
  _impl_.membership_id_.ClearToEmpty();
  ::memset(&_impl_.membership_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.school_type_) -
      reinterpret_cast<char*>(&_impl_.membership_type_)) + sizeof(_impl_.school_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CREATE_ROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ip_address = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ip_address();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CREATE_ROOM.ip_address"));
        } else
          goto handle_unusual;
        continue;
      // string membership_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CREATE_ROOM.membership_id"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType membership_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SchoolType school_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_school_type(static_cast<::Protocol::SchoolType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CREATE_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CREATE_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip_address().data(), static_cast<int>(this->_internal_ip_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CREATE_ROOM.ip_address");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ip_address(), target);
  }

  // string membership_id = 2;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CREATE_ROOM.membership_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_membership_id(), target);
  }

  // .Protocol.PlayerType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_membership_type(), target);
  }

  // .Protocol.SchoolType school_type = 4;
  if (this->_internal_school_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_school_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CREATE_ROOM)
  return target;
}

size_t C_CREATE_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CREATE_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip_address = 1;
  if (!this->_internal_ip_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip_address());
  }

  // string membership_id = 2;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // .Protocol.PlayerType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type());
  }

  // .Protocol.SchoolType school_type = 4;
  if (this->_internal_school_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_school_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CREATE_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CREATE_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CREATE_ROOM::GetClassData() const { return &_class_data_; }


void C_CREATE_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CREATE_ROOM*>(&to_msg);
  auto& from = static_cast<const C_CREATE_ROOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CREATE_ROOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip_address().empty()) {
    _this->_internal_set_ip_address(from._internal_ip_address());
  }
  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  if (from._internal_membership_type() != 0) {
    _this->_internal_set_membership_type(from._internal_membership_type());
  }
  if (from._internal_school_type() != 0) {
    _this->_internal_set_school_type(from._internal_school_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CREATE_ROOM::CopyFrom(const C_CREATE_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CREATE_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CREATE_ROOM::IsInitialized() const {
  return true;
}

void C_CREATE_ROOM::InternalSwap(C_CREATE_ROOM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.ip_address_, lhs_arena,
      &other->_impl_.ip_address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_CREATE_ROOM, _impl_.school_type_)
      + sizeof(C_CREATE_ROOM::_impl_.school_type_)
      - PROTOBUF_FIELD_OFFSET(C_CREATE_ROOM, _impl_.membership_type_)>(
          reinterpret_cast<char*>(&_impl_.membership_type_),
          reinterpret_cast<char*>(&other->_impl_.membership_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CREATE_ROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[4]);
}

// ===================================================================

class C_ENTER_ROOM::_Internal {
 public:
};

C_ENTER_ROOM::C_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_ENTER_ROOM)
}
C_ENTER_ROOM::C_ENTER_ROOM(const C_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_ENTER_ROOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.membership_type_){}
    , decltype(_impl_.school_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.membership_type_, &from._impl_.membership_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.school_type_) -
    reinterpret_cast<char*>(&_impl_.membership_type_)) + sizeof(_impl_.school_type_));
  // @@protoc_insertion_point(copy_constructor:Protocol.C_ENTER_ROOM)
}

inline void C_ENTER_ROOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.membership_type_){0}
    , decltype(_impl_.school_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_ENTER_ROOM::~C_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.C_ENTER_ROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_.Destroy();
}

void C_ENTER_ROOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_.ClearToEmpty();
  ::memset(&_impl_.membership_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.school_type_) -
      reinterpret_cast<char*>(&_impl_.membership_type_)) + sizeof(_impl_.school_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_ENTER_ROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string membership_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_ENTER_ROOM.membership_id"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType membership_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SchoolType school_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_school_type(static_cast<::Protocol::SchoolType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_ENTER_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_ENTER_ROOM.membership_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_membership_id(), target);
  }

  // .Protocol.PlayerType membership_type = 2;
  if (this->_internal_membership_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_membership_type(), target);
  }

  // .Protocol.SchoolType school_type = 3;
  if (this->_internal_school_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_school_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_ENTER_ROOM)
  return target;
}

size_t C_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_ENTER_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // .Protocol.PlayerType membership_type = 2;
  if (this->_internal_membership_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type());
  }

  // .Protocol.SchoolType school_type = 3;
  if (this->_internal_school_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_school_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_ENTER_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_ENTER_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_ENTER_ROOM::GetClassData() const { return &_class_data_; }


void C_ENTER_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_ENTER_ROOM*>(&to_msg);
  auto& from = static_cast<const C_ENTER_ROOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  if (from._internal_membership_type() != 0) {
    _this->_internal_set_membership_type(from._internal_membership_type());
  }
  if (from._internal_school_type() != 0) {
    _this->_internal_set_school_type(from._internal_school_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_ENTER_ROOM::CopyFrom(const C_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_ENTER_ROOM::IsInitialized() const {
  return true;
}

void C_ENTER_ROOM::InternalSwap(C_ENTER_ROOM* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(C_ENTER_ROOM, _impl_.school_type_)
      + sizeof(C_ENTER_ROOM::_impl_.school_type_)
      - PROTOBUF_FIELD_OFFSET(C_ENTER_ROOM, _impl_.membership_type_)>(
          reinterpret_cast<char*>(&_impl_.membership_type_),
          reinterpret_cast<char*>(&other->_impl_.membership_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata C_ENTER_ROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[5]);
}

// ===================================================================

class S_ENTER_ROOM::_Internal {
 public:
};

S_ENTER_ROOM::S_ENTER_ROOM(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_ROOM)
}
S_ENTER_ROOM::S_ENTER_ROOM(const S_ENTER_ROOM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTER_ROOM* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.success_ = from._impl_.success_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_ROOM)
}

inline void S_ENTER_ROOM::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.success_){false}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_ENTER_ROOM::~S_ENTER_ROOM() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_ROOM)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTER_ROOM::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void S_ENTER_ROOM::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTER_ROOM::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_ROOM::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER_ROOM::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_ROOM)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_ROOM)
  return target;
}

size_t S_ENTER_ROOM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_ROOM)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER_ROOM::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTER_ROOM::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER_ROOM::GetClassData() const { return &_class_data_; }


void S_ENTER_ROOM::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTER_ROOM*>(&to_msg);
  auto& from = static_cast<const S_ENTER_ROOM&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_ROOM)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER_ROOM::CopyFrom(const S_ENTER_ROOM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_ROOM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_ROOM::IsInitialized() const {
  return true;
}

void S_ENTER_ROOM::InternalSwap(S_ENTER_ROOM* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.success_, other->_impl_.success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_ROOM::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[6]);
}

// ===================================================================

class S_ENTER_GAME::_Internal {
 public:
};

S_ENTER_GAME::S_ENTER_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_ENTER_GAME)
}
S_ENTER_GAME::S_ENTER_GAME(const S_ENTER_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_ENTER_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_0_){}
    , decltype(_impl_.membership_id_1_){}
    , decltype(_impl_.membership_id_2_){}
    , decltype(_impl_.server_ip_){}
    , decltype(_impl_.success_){}
    , decltype(_impl_.membership_type_0_){}
    , decltype(_impl_.membership_type_1_){}
    , decltype(_impl_.membership_type_2_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id_0().empty()) {
    _this->_impl_.membership_id_0_.Set(from._internal_membership_id_0(), 
      _this->GetArenaForAllocation());
  }
  _impl_.membership_id_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id_1().empty()) {
    _this->_impl_.membership_id_1_.Set(from._internal_membership_id_1(), 
      _this->GetArenaForAllocation());
  }
  _impl_.membership_id_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id_2().empty()) {
    _this->_impl_.membership_id_2_.Set(from._internal_membership_id_2(), 
      _this->GetArenaForAllocation());
  }
  _impl_.server_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_server_ip().empty()) {
    _this->_impl_.server_ip_.Set(from._internal_server_ip(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.success_, &from._impl_.success_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.membership_type_2_) -
    reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.membership_type_2_));
  // @@protoc_insertion_point(copy_constructor:Protocol.S_ENTER_GAME)
}

inline void S_ENTER_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_0_){}
    , decltype(_impl_.membership_id_1_){}
    , decltype(_impl_.membership_id_2_){}
    , decltype(_impl_.server_ip_){}
    , decltype(_impl_.success_){false}
    , decltype(_impl_.membership_type_0_){0}
    , decltype(_impl_.membership_type_1_){0}
    , decltype(_impl_.membership_type_2_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_0_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_0_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.membership_id_1_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_1_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.membership_id_2_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_2_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.server_ip_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.server_ip_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_ENTER_GAME::~S_ENTER_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_ENTER_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_ENTER_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_0_.Destroy();
  _impl_.membership_id_1_.Destroy();
  _impl_.membership_id_2_.Destroy();
  _impl_.server_ip_.Destroy();
}

void S_ENTER_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_ENTER_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_0_.ClearToEmpty();
  _impl_.membership_id_1_.ClearToEmpty();
  _impl_.membership_id_2_.ClearToEmpty();
  _impl_.server_ip_.ClearToEmpty();
  ::memset(&_impl_.success_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.membership_type_2_) -
      reinterpret_cast<char*>(&_impl_.success_)) + sizeof(_impl_.membership_type_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_ENTER_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string membership_id_0 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_membership_id_0();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ENTER_GAME.membership_id_0"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType membership_type_0 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type_0(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      // string membership_id_1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_membership_id_1();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ENTER_GAME.membership_id_1"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType membership_type_1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type_1(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      // string membership_id_2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_membership_id_2();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ENTER_GAME.membership_id_2"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType membership_type_2 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type_2(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      // string server_ip = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_server_ip();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_ENTER_GAME.server_ip"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_ENTER_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_ENTER_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string membership_id_0 = 2;
  if (!this->_internal_membership_id_0().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id_0().data(), static_cast<int>(this->_internal_membership_id_0().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ENTER_GAME.membership_id_0");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_membership_id_0(), target);
  }

  // .Protocol.PlayerType membership_type_0 = 3;
  if (this->_internal_membership_type_0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_membership_type_0(), target);
  }

  // string membership_id_1 = 4;
  if (!this->_internal_membership_id_1().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id_1().data(), static_cast<int>(this->_internal_membership_id_1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ENTER_GAME.membership_id_1");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_membership_id_1(), target);
  }

  // .Protocol.PlayerType membership_type_1 = 5;
  if (this->_internal_membership_type_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_membership_type_1(), target);
  }

  // string membership_id_2 = 6;
  if (!this->_internal_membership_id_2().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id_2().data(), static_cast<int>(this->_internal_membership_id_2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ENTER_GAME.membership_id_2");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_membership_id_2(), target);
  }

  // .Protocol.PlayerType membership_type_2 = 7;
  if (this->_internal_membership_type_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_membership_type_2(), target);
  }

  // string server_ip = 8;
  if (!this->_internal_server_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_server_ip().data(), static_cast<int>(this->_internal_server_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_ENTER_GAME.server_ip");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_server_ip(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_ENTER_GAME)
  return target;
}

size_t S_ENTER_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_ENTER_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id_0 = 2;
  if (!this->_internal_membership_id_0().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id_0());
  }

  // string membership_id_1 = 4;
  if (!this->_internal_membership_id_1().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id_1());
  }

  // string membership_id_2 = 6;
  if (!this->_internal_membership_id_2().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id_2());
  }

  // string server_ip = 8;
  if (!this->_internal_server_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_server_ip());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  // .Protocol.PlayerType membership_type_0 = 3;
  if (this->_internal_membership_type_0() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type_0());
  }

  // .Protocol.PlayerType membership_type_1 = 5;
  if (this->_internal_membership_type_1() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type_1());
  }

  // .Protocol.PlayerType membership_type_2 = 7;
  if (this->_internal_membership_type_2() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_ENTER_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_ENTER_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_ENTER_GAME::GetClassData() const { return &_class_data_; }


void S_ENTER_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_ENTER_GAME*>(&to_msg);
  auto& from = static_cast<const S_ENTER_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_ENTER_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id_0().empty()) {
    _this->_internal_set_membership_id_0(from._internal_membership_id_0());
  }
  if (!from._internal_membership_id_1().empty()) {
    _this->_internal_set_membership_id_1(from._internal_membership_id_1());
  }
  if (!from._internal_membership_id_2().empty()) {
    _this->_internal_set_membership_id_2(from._internal_membership_id_2());
  }
  if (!from._internal_server_ip().empty()) {
    _this->_internal_set_server_ip(from._internal_server_ip());
  }
  if (from._internal_success() != 0) {
    _this->_internal_set_success(from._internal_success());
  }
  if (from._internal_membership_type_0() != 0) {
    _this->_internal_set_membership_type_0(from._internal_membership_type_0());
  }
  if (from._internal_membership_type_1() != 0) {
    _this->_internal_set_membership_type_1(from._internal_membership_type_1());
  }
  if (from._internal_membership_type_2() != 0) {
    _this->_internal_set_membership_type_2(from._internal_membership_type_2());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_ENTER_GAME::CopyFrom(const S_ENTER_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_ENTER_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_ENTER_GAME::IsInitialized() const {
  return true;
}

void S_ENTER_GAME::InternalSwap(S_ENTER_GAME* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_0_, lhs_arena,
      &other->_impl_.membership_id_0_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_1_, lhs_arena,
      &other->_impl_.membership_id_1_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_2_, lhs_arena,
      &other->_impl_.membership_id_2_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.server_ip_, lhs_arena,
      &other->_impl_.server_ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.membership_type_2_)
      + sizeof(S_ENTER_GAME::_impl_.membership_type_2_)
      - PROTOBUF_FIELD_OFFSET(S_ENTER_GAME, _impl_.success_)>(
          reinterpret_cast<char*>(&_impl_.success_),
          reinterpret_cast<char*>(&other->_impl_.success_));
}

::PROTOBUF_NAMESPACE_ID::Metadata S_ENTER_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[7]);
}

// ===================================================================

class C_LEAVE_GAME::_Internal {
 public:
};

C_LEAVE_GAME::C_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:Protocol.C_LEAVE_GAME)
}
C_LEAVE_GAME::C_LEAVE_GAME(const C_LEAVE_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  C_LEAVE_GAME* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.C_LEAVE_GAME)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_LEAVE_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_LEAVE_GAME::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata C_LEAVE_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[8]);
}

// ===================================================================

class S_LEAVE_GAME::_Internal {
 public:
};

S_LEAVE_GAME::S_LEAVE_GAME(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_LEAVE_GAME)
}
S_LEAVE_GAME::S_LEAVE_GAME(const S_LEAVE_GAME& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_LEAVE_GAME* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){}
    , decltype(_impl_.b_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.a_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_a().empty()) {
    _this->_impl_.a_.Set(from._internal_a(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.b_ = from._impl_.b_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_LEAVE_GAME)
}

inline void S_LEAVE_GAME::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.a_){}
    , decltype(_impl_.b_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.a_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.a_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_LEAVE_GAME::~S_LEAVE_GAME() {
  // @@protoc_insertion_point(destructor:Protocol.S_LEAVE_GAME)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_LEAVE_GAME::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.a_.Destroy();
}

void S_LEAVE_GAME::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_LEAVE_GAME::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_LEAVE_GAME)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.a_.ClearToEmpty();
  _impl_.b_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_LEAVE_GAME::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string a = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_a();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_LEAVE_GAME.a"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.PlayerType b = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_b(static_cast<::Protocol::PlayerType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_LEAVE_GAME::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_LEAVE_GAME)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string a = 1;
  if (!this->_internal_a().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_a().data(), static_cast<int>(this->_internal_a().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_LEAVE_GAME.a");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_a(), target);
  }

  // .Protocol.PlayerType b = 2;
  if (this->_internal_b() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_b(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_LEAVE_GAME)
  return target;
}

size_t S_LEAVE_GAME::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_LEAVE_GAME)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string a = 1;
  if (!this->_internal_a().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_a());
  }

  // .Protocol.PlayerType b = 2;
  if (this->_internal_b() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_b());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_LEAVE_GAME::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_LEAVE_GAME::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_LEAVE_GAME::GetClassData() const { return &_class_data_; }


void S_LEAVE_GAME::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_LEAVE_GAME*>(&to_msg);
  auto& from = static_cast<const S_LEAVE_GAME&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_LEAVE_GAME)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_a().empty()) {
    _this->_internal_set_a(from._internal_a());
  }
  if (from._internal_b() != 0) {
    _this->_internal_set_b(from._internal_b());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_LEAVE_GAME::CopyFrom(const S_LEAVE_GAME& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_LEAVE_GAME)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_LEAVE_GAME::IsInitialized() const {
  return true;
}

void S_LEAVE_GAME::InternalSwap(S_LEAVE_GAME* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.a_, lhs_arena,
      &other->_impl_.a_, rhs_arena
  );
  swap(_impl_.b_, other->_impl_.b_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_LEAVE_GAME::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[9]);
}

// ===================================================================

class S_SPAWN::_Internal {
 public:
};

void S_SPAWN::clear_players() {
  _impl_.players_.Clear();
}
S_SPAWN::S_SPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_SPAWN)
}
S_SPAWN::S_SPAWN(const S_SPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_SPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){from._impl_.players_}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_SPAWN)
}

inline void S_SPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.players_){arena}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_SPAWN::~S_SPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_SPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_SPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.players_.~RepeatedPtrField();
}

void S_SPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_SPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_SPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.players_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_SPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Protocol.PlayerInfo players = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_players(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_SPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_SPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo players = 1;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_players_size()); i < n; i++) {
    const auto& repfield = this->_internal_players(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(1, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_SPAWN)
  return target;
}

size_t S_SPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_SPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Protocol.PlayerInfo players = 1;
  total_size += 1UL * this->_internal_players_size();
  for (const auto& msg : this->_impl_.players_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_SPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_SPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_SPAWN::GetClassData() const { return &_class_data_; }


void S_SPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_SPAWN*>(&to_msg);
  auto& from = static_cast<const S_SPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_SPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.players_.MergeFrom(from._impl_.players_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_SPAWN::CopyFrom(const S_SPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_SPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_SPAWN::IsInitialized() const {
  return true;
}

void S_SPAWN::InternalSwap(S_SPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.players_.InternalSwap(&other->_impl_.players_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_SPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[10]);
}

// ===================================================================

class S_DESPAWN::_Internal {
 public:
};

S_DESPAWN::S_DESPAWN(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_DESPAWN)
}
S_DESPAWN::S_DESPAWN(const S_DESPAWN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_DESPAWN* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){from._impl_.object_ids_}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Protocol.S_DESPAWN)
}

inline void S_DESPAWN::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.object_ids_){arena}
    , /*decltype(_impl_._object_ids_cached_byte_size_)*/{0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

S_DESPAWN::~S_DESPAWN() {
  // @@protoc_insertion_point(destructor:Protocol.S_DESPAWN)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_DESPAWN::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.object_ids_.~RepeatedField();
}

void S_DESPAWN::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_DESPAWN::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.object_ids_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_DESPAWN::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated uint64 object_ids = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_object_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_object_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_DESPAWN::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_DESPAWN)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1;
  {
    int byte_size = _impl_._object_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          1, _internal_object_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_DESPAWN)
  return target;
}

size_t S_DESPAWN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_DESPAWN)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 object_ids = 1;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      UInt64Size(this->_impl_.object_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._object_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_DESPAWN::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_DESPAWN::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_DESPAWN::GetClassData() const { return &_class_data_; }


void S_DESPAWN::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_DESPAWN*>(&to_msg);
  auto& from = static_cast<const S_DESPAWN&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_DESPAWN)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.object_ids_.MergeFrom(from._impl_.object_ids_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_DESPAWN::CopyFrom(const S_DESPAWN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_DESPAWN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_DESPAWN::IsInitialized() const {
  return true;
}

void S_DESPAWN::InternalSwap(S_DESPAWN* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.object_ids_.InternalSwap(&other->_impl_.object_ids_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_DESPAWN::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[11]);
}

// ===================================================================

class C_CHAT::_Internal {
 public:
};

C_CHAT::C_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_CHAT)
}
C_CHAT::C_CHAT(const C_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_CHAT)
}

inline void C_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_CHAT::~C_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void C_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_CHAT)
  return target;
}

size_t C_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_CHAT::GetClassData() const { return &_class_data_; }


void C_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_CHAT*>(&to_msg);
  auto& from = static_cast<const C_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_CHAT::CopyFrom(const C_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_CHAT::IsInitialized() const {
  return true;
}

void C_CHAT::InternalSwap(C_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[12]);
}

// ===================================================================

class S_CHAT::_Internal {
 public:
};

S_CHAT::S_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_CHAT)
}
S_CHAT::S_CHAT(const S_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.playerid_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.playerid_ = from._impl_.playerid_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_CHAT)
}

inline void S_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.msg_){}
    , decltype(_impl_.playerid_){uint64_t{0u}}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_CHAT::~S_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.msg_.Destroy();
}

void S_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.msg_.ClearToEmpty();
  _impl_.playerid_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 playerId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.playerid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt64ToArray(1, this->_internal_playerid(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_CHAT)
  return target;
}

size_t S_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // uint64 playerId = 1;
  if (this->_internal_playerid() != 0) {
    total_size += ::_pbi::WireFormatLite::UInt64SizePlusOne(this->_internal_playerid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_CHAT::GetClassData() const { return &_class_data_; }


void S_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_CHAT*>(&to_msg);
  auto& from = static_cast<const S_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_playerid() != 0) {
    _this->_internal_set_playerid(from._internal_playerid());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_CHAT::CopyFrom(const S_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_CHAT::IsInitialized() const {
  return true;
}

void S_CHAT::InternalSwap(S_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.playerid_, other->_impl_.playerid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[13]);
}

// ===================================================================

class C_PUBLIC_CHAT::_Internal {
 public:
};

C_PUBLIC_CHAT::C_PUBLIC_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PUBLIC_CHAT)
}
C_PUBLIC_CHAT::C_PUBLIC_CHAT(const C_PUBLIC_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PUBLIC_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.msg_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_num().empty()) {
    _this->_impl_.msg_num_.Set(from._internal_msg_num(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PUBLIC_CHAT)
}

inline void C_PUBLIC_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.msg_num_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_PUBLIC_CHAT::~C_PUBLIC_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_PUBLIC_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PUBLIC_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_.Destroy();
  _impl_.msg_.Destroy();
  _impl_.msg_num_.Destroy();
}

void C_PUBLIC_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PUBLIC_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PUBLIC_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.msg_num_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PUBLIC_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string membership_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_PUBLIC_CHAT.membership_id"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_PUBLIC_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      // string msg_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_num();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_PUBLIC_CHAT.msg_num"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PUBLIC_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PUBLIC_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_PUBLIC_CHAT.membership_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_membership_id(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_PUBLIC_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string msg_num = 3;
  if (!this->_internal_msg_num().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_num().data(), static_cast<int>(this->_internal_msg_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_PUBLIC_CHAT.msg_num");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PUBLIC_CHAT)
  return target;
}

size_t C_PUBLIC_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PUBLIC_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string msg_num = 3;
  if (!this->_internal_msg_num().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PUBLIC_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PUBLIC_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PUBLIC_CHAT::GetClassData() const { return &_class_data_; }


void C_PUBLIC_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PUBLIC_CHAT*>(&to_msg);
  auto& from = static_cast<const C_PUBLIC_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PUBLIC_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_msg_num().empty()) {
    _this->_internal_set_msg_num(from._internal_msg_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PUBLIC_CHAT::CopyFrom(const C_PUBLIC_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PUBLIC_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PUBLIC_CHAT::IsInitialized() const {
  return true;
}

void C_PUBLIC_CHAT::InternalSwap(C_PUBLIC_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_num_, lhs_arena,
      &other->_impl_.msg_num_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PUBLIC_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[14]);
}

// ===================================================================

class S_PUBLIC_CHAT::_Internal {
 public:
};

S_PUBLIC_CHAT::S_PUBLIC_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PUBLIC_CHAT)
}
S_PUBLIC_CHAT::S_PUBLIC_CHAT(const S_PUBLIC_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PUBLIC_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.msg_num_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg_num().empty()) {
    _this->_impl_.msg_num_.Set(from._internal_msg_num(), 
      _this->GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PUBLIC_CHAT)
}

inline void S_PUBLIC_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.msg_num_){}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_num_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_num_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_PUBLIC_CHAT::~S_PUBLIC_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_PUBLIC_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PUBLIC_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_.Destroy();
  _impl_.msg_.Destroy();
  _impl_.msg_num_.Destroy();
}

void S_PUBLIC_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PUBLIC_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PUBLIC_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.msg_num_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PUBLIC_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string membership_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_PUBLIC_CHAT.membership_id"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_PUBLIC_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      // string msg_num = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_msg_num();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_PUBLIC_CHAT.msg_num"));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PUBLIC_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PUBLIC_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_PUBLIC_CHAT.membership_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_membership_id(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_PUBLIC_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // string msg_num = 3;
  if (!this->_internal_msg_num().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg_num().data(), static_cast<int>(this->_internal_msg_num().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_PUBLIC_CHAT.msg_num");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_msg_num(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PUBLIC_CHAT)
  return target;
}

size_t S_PUBLIC_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PUBLIC_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string msg_num = 3;
  if (!this->_internal_msg_num().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg_num());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PUBLIC_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PUBLIC_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PUBLIC_CHAT::GetClassData() const { return &_class_data_; }


void S_PUBLIC_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PUBLIC_CHAT*>(&to_msg);
  auto& from = static_cast<const S_PUBLIC_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PUBLIC_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (!from._internal_msg_num().empty()) {
    _this->_internal_set_msg_num(from._internal_msg_num());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PUBLIC_CHAT::CopyFrom(const S_PUBLIC_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PUBLIC_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PUBLIC_CHAT::IsInitialized() const {
  return true;
}

void S_PUBLIC_CHAT::InternalSwap(S_PUBLIC_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_num_, lhs_arena,
      &other->_impl_.msg_num_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PUBLIC_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[15]);
}

// ===================================================================

class C_PRIVATE_CHAT::_Internal {
 public:
};

C_PRIVATE_CHAT::C_PRIVATE_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.C_PRIVATE_CHAT)
}
C_PRIVATE_CHAT::C_PRIVATE_CHAT(const C_PRIVATE_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  C_PRIVATE_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.membership_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.membership_type_ = from._impl_.membership_type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.C_PRIVATE_CHAT)
}

inline void C_PRIVATE_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.membership_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

C_PRIVATE_CHAT::~C_PRIVATE_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.C_PRIVATE_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void C_PRIVATE_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_.Destroy();
  _impl_.msg_.Destroy();
}

void C_PRIVATE_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void C_PRIVATE_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.C_PRIVATE_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.membership_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* C_PRIVATE_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string membership_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_PRIVATE_CHAT.membership_id"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.C_PRIVATE_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SchoolType membership_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type(static_cast<::Protocol::SchoolType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* C_PRIVATE_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.C_PRIVATE_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_PRIVATE_CHAT.membership_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_membership_id(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.C_PRIVATE_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // .Protocol.SchoolType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_membership_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.C_PRIVATE_CHAT)
  return target;
}

size_t C_PRIVATE_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.C_PRIVATE_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .Protocol.SchoolType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData C_PRIVATE_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    C_PRIVATE_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*C_PRIVATE_CHAT::GetClassData() const { return &_class_data_; }


void C_PRIVATE_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<C_PRIVATE_CHAT*>(&to_msg);
  auto& from = static_cast<const C_PRIVATE_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.C_PRIVATE_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_membership_type() != 0) {
    _this->_internal_set_membership_type(from._internal_membership_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void C_PRIVATE_CHAT::CopyFrom(const C_PRIVATE_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.C_PRIVATE_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool C_PRIVATE_CHAT::IsInitialized() const {
  return true;
}

void C_PRIVATE_CHAT::InternalSwap(C_PRIVATE_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.membership_type_, other->_impl_.membership_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata C_PRIVATE_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[16]);
}

// ===================================================================

class S_PRIVATE_CHAT::_Internal {
 public:
};

S_PRIVATE_CHAT::S_PRIVATE_CHAT(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:Protocol.S_PRIVATE_CHAT)
}
S_PRIVATE_CHAT::S_PRIVATE_CHAT(const S_PRIVATE_CHAT& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  S_PRIVATE_CHAT* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.membership_type_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_membership_id().empty()) {
    _this->_impl_.membership_id_.Set(from._internal_membership_id(), 
      _this->GetArenaForAllocation());
  }
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    _this->_impl_.msg_.Set(from._internal_msg(), 
      _this->GetArenaForAllocation());
  }
  _this->_impl_.membership_type_ = from._impl_.membership_type_;
  // @@protoc_insertion_point(copy_constructor:Protocol.S_PRIVATE_CHAT)
}

inline void S_PRIVATE_CHAT::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.membership_id_){}
    , decltype(_impl_.msg_){}
    , decltype(_impl_.membership_type_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.membership_id_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.membership_id_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.msg_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.msg_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

S_PRIVATE_CHAT::~S_PRIVATE_CHAT() {
  // @@protoc_insertion_point(destructor:Protocol.S_PRIVATE_CHAT)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void S_PRIVATE_CHAT::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.membership_id_.Destroy();
  _impl_.msg_.Destroy();
}

void S_PRIVATE_CHAT::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void S_PRIVATE_CHAT::Clear() {
// @@protoc_insertion_point(message_clear_start:Protocol.S_PRIVATE_CHAT)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.membership_id_.ClearToEmpty();
  _impl_.msg_.ClearToEmpty();
  _impl_.membership_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* S_PRIVATE_CHAT::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string membership_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_membership_id();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_PRIVATE_CHAT.membership_id"));
        } else
          goto handle_unusual;
        continue;
      // string msg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_msg();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "Protocol.S_PRIVATE_CHAT.msg"));
        } else
          goto handle_unusual;
        continue;
      // .Protocol.SchoolType membership_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_membership_type(static_cast<::Protocol::SchoolType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* S_PRIVATE_CHAT::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Protocol.S_PRIVATE_CHAT)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_membership_id().data(), static_cast<int>(this->_internal_membership_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_PRIVATE_CHAT.membership_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_membership_id(), target);
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Protocol.S_PRIVATE_CHAT.msg");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_msg(), target);
  }

  // .Protocol.SchoolType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_membership_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Protocol.S_PRIVATE_CHAT)
  return target;
}

size_t S_PRIVATE_CHAT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Protocol.S_PRIVATE_CHAT)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string membership_id = 1;
  if (!this->_internal_membership_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_membership_id());
  }

  // string msg = 2;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // .Protocol.SchoolType membership_type = 3;
  if (this->_internal_membership_type() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_membership_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData S_PRIVATE_CHAT::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    S_PRIVATE_CHAT::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*S_PRIVATE_CHAT::GetClassData() const { return &_class_data_; }


void S_PRIVATE_CHAT::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<S_PRIVATE_CHAT*>(&to_msg);
  auto& from = static_cast<const S_PRIVATE_CHAT&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:Protocol.S_PRIVATE_CHAT)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_membership_id().empty()) {
    _this->_internal_set_membership_id(from._internal_membership_id());
  }
  if (!from._internal_msg().empty()) {
    _this->_internal_set_msg(from._internal_msg());
  }
  if (from._internal_membership_type() != 0) {
    _this->_internal_set_membership_type(from._internal_membership_type());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void S_PRIVATE_CHAT::CopyFrom(const S_PRIVATE_CHAT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Protocol.S_PRIVATE_CHAT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool S_PRIVATE_CHAT::IsInitialized() const {
  return true;
}

void S_PRIVATE_CHAT::InternalSwap(S_PRIVATE_CHAT* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.membership_id_, lhs_arena,
      &other->_impl_.membership_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.msg_, lhs_arena,
      &other->_impl_.msg_, rhs_arena
  );
  swap(_impl_.membership_type_, other->_impl_.membership_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata S_PRIVATE_CHAT::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Protocol_2eproto_getter, &descriptor_table_Protocol_2eproto_once,
      file_level_metadata_Protocol_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace Protocol
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Protocol::C_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::C_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LOGIN*
Arena::CreateMaybeMessage< ::Protocol::S_LOGIN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LOGIN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_MEMBERSHIP*
Arena::CreateMaybeMessage< ::Protocol::C_MEMBERSHIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_MEMBERSHIP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_MEMBERSHIP*
Arena::CreateMaybeMessage< ::Protocol::S_MEMBERSHIP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_MEMBERSHIP >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CREATE_ROOM*
Arena::CreateMaybeMessage< ::Protocol::C_CREATE_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CREATE_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_ENTER_ROOM*
Arena::CreateMaybeMessage< ::Protocol::C_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_ROOM*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER_ROOM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_ROOM >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_ENTER_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_ENTER_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_ENTER_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::C_LEAVE_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_LEAVE_GAME*
Arena::CreateMaybeMessage< ::Protocol::S_LEAVE_GAME >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_LEAVE_GAME >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_SPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_SPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_SPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_DESPAWN*
Arena::CreateMaybeMessage< ::Protocol::S_DESPAWN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_DESPAWN >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_CHAT*
Arena::CreateMaybeMessage< ::Protocol::C_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_CHAT*
Arena::CreateMaybeMessage< ::Protocol::S_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PUBLIC_CHAT*
Arena::CreateMaybeMessage< ::Protocol::C_PUBLIC_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PUBLIC_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PUBLIC_CHAT*
Arena::CreateMaybeMessage< ::Protocol::S_PUBLIC_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PUBLIC_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::C_PRIVATE_CHAT*
Arena::CreateMaybeMessage< ::Protocol::C_PRIVATE_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::C_PRIVATE_CHAT >(arena);
}
template<> PROTOBUF_NOINLINE ::Protocol::S_PRIVATE_CHAT*
Arena::CreateMaybeMessage< ::Protocol::S_PRIVATE_CHAT >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Protocol::S_PRIVATE_CHAT >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
